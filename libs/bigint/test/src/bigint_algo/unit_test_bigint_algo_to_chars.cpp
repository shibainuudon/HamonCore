/**
 *	@file	unit_test_bigint_algo_to_chars.cpp
 *
 *	@brief	bigint_algo::to_chars のテスト
 */

#include <hamon/bigint/bigint_algo/to_chars.hpp>
#include <hamon/array.hpp>
#include <hamon/cstdint.hpp>
#include <hamon/string_view.hpp>
#include <gtest/gtest.h>
#include <vector>
#include "constexpr_test.hpp"

namespace hamon_bigint_test
{

namespace bigint_algo_to_chars_test
{

#define VERIFY(...)	if (!(__VA_ARGS__)) { return false; }

template <typename T>
inline HAMON_CXX14_CONSTEXPR bool
ToCharsTest(T const& val, int base, const char* expected)
{
	char buf[128]{};
	auto ret = hamon::bigint_algo::to_chars(buf, buf+sizeof(buf), val, base);
	//if (hamon::string_view(buf, ret.ptr) != expected)
	//{
	//	std::cout << hamon::string_view(buf, ret.ptr) << std::endl;
	//}

	VERIFY(hamon::string_view(buf, ret.ptr) == expected);
	VERIFY(ret.ec == std::errc{});

	return true;
}

GTEST_TEST(BigIntAlgoTest, ToCharsTest)
{
	// 68ms
	{
		using Vector = std::vector<hamon::uint8_t>;
		EXPECT_TRUE(ToCharsTest(Vector{0x00}, 10, "0"));
		EXPECT_TRUE(ToCharsTest(Vector{0x01}, 10, "1"));
		EXPECT_TRUE(ToCharsTest(Vector{0x0C}, 10, "12"));
		EXPECT_TRUE(ToCharsTest(Vector{0x7B}, 10, "123"));
		EXPECT_TRUE(ToCharsTest(Vector{0xD2, 0x04}, 10, "1234"));
		EXPECT_TRUE(ToCharsTest(Vector{0x39, 0x30}, 10, "12345"));
		EXPECT_TRUE(ToCharsTest(Vector{0x40, 0xE2, 0x01}, 10, "123456"));
		EXPECT_TRUE(ToCharsTest(Vector{0x87, 0xD6, 0x12}, 10, "1234567"));
		EXPECT_TRUE(ToCharsTest(Vector{0x4E, 0x61, 0xBC}, 10, "12345678"));
		EXPECT_TRUE(ToCharsTest(Vector{0x15, 0xCD, 0x5B, 0x07}, 10, "123456789"));
		EXPECT_TRUE(ToCharsTest(Vector{0xD2, 0x02, 0x96, 0x49}, 10, "1234567890"));
		EXPECT_TRUE(ToCharsTest(Vector{0x35, 0x1C, 0xDC, 0xDF, 0x02}, 10, "12345678901"));
		EXPECT_TRUE(ToCharsTest(Vector{0x14, 0x1A, 0x99, 0xBE, 0x1C}, 10, "123456789012"));
		EXPECT_TRUE(ToCharsTest(Vector{0xCB, 0x04, 0xFB, 0x71, 0x1F, 0x01}, 10, "1234567890123"));
		EXPECT_TRUE(ToCharsTest(Vector{0xF2, 0x2F, 0xCE, 0x73, 0x3A, 0x0B}, 10, "12345678901234"));
		EXPECT_TRUE(ToCharsTest(Vector{0x79, 0xDF, 0x0D, 0x86, 0x48, 0x70}, 10, "123456789012345"));
		EXPECT_TRUE(ToCharsTest(Vector{0xC0, 0xBA, 0x8A, 0x3C, 0xD5, 0x62, 0x04}, 10, "1234567890123456"));
		EXPECT_TRUE(ToCharsTest(Vector{0x87, 0x4B, 0x6B, 0x5D, 0x54, 0xDC, 0x2B}, 10, "12345678901234567"));
		EXPECT_TRUE(ToCharsTest(Vector{0x4E, 0xF3, 0x30, 0xA6, 0x4B, 0x9B, 0xB6, 0x01}, 10, "123456789012345678"));
		EXPECT_TRUE(ToCharsTest(Vector{0x15, 0x81, 0xE9, 0x7D, 0xF4, 0x10, 0x22, 0x11}, 10, "1234567890123456789"));
		EXPECT_TRUE(ToCharsTest(Vector{0xD2, 0x0A, 0x1F, 0xEB, 0x8C, 0xA9, 0x54, 0xAB}, 10, "12345678901234567890"));
		EXPECT_TRUE(ToCharsTest(Vector{0x35, 0x6C, 0x36, 0x2F, 0x81, 0x9F, 0x4E, 0xB1, 0x06}, 10, "123456789012345678901"));
		EXPECT_TRUE(ToCharsTest(Vector{0x14, 0x3A, 0x20, 0xD8, 0x0B, 0x3B, 0x12, 0xED, 0x42}, 10, "1234567890123456789012"));
		EXPECT_TRUE(ToCharsTest(Vector{0xCB, 0x44, 0x42, 0x71, 0x76, 0x4E, 0xB6, 0x42, 0x9D, 0x02}, 10, "12345678901234567890123"));
		EXPECT_TRUE(ToCharsTest(Vector{0xF2, 0xAF, 0x96, 0x6C, 0xA0, 0x10, 0x1F, 0x9B, 0x24, 0x1A}, 10, "123456789012345678901234"));
		EXPECT_TRUE(ToCharsTest(Vector{0x79, 0xDF, 0xE2, 0x3D, 0x44, 0xA6, 0x36, 0x0F, 0x6E, 0x05, 0x01}, 10, "1234567890123456789012345"));
		EXPECT_TRUE(ToCharsTest(Vector{0xC0, 0xBA, 0xDC, 0x6A, 0xAA, 0x7E, 0x22, 0x98, 0x4C, 0x36, 0x0A}, 10, "12345678901234567890123456"));
		EXPECT_TRUE(ToCharsTest(Vector{0x87, 0x4B, 0x9F, 0x2C, 0xA8, 0xF2, 0x58, 0xF1, 0xFD, 0x1E, 0x66}, 10, "123456789012345678901234567"));
		EXPECT_TRUE(ToCharsTest(Vector{0x4E, 0xF3, 0x38, 0xBE, 0x91, 0x7A, 0x79, 0x6D, 0xEB, 0x35, 0xFD, 0x03}, 10, "1234567890123456789012345678"));
		EXPECT_TRUE(ToCharsTest(Vector{0x15, 0x81, 0x39, 0x6E, 0xB1, 0xC9, 0xBE, 0x46, 0x32, 0x1B, 0xE4, 0x27}, 10, "12345678901234567890123456789"));
	}
	// 147ms
	{
		using Vector = std::vector<hamon::uint16_t>;
		EXPECT_TRUE(ToCharsTest(Vector{0x0000}, 10, "0"));
		EXPECT_TRUE(ToCharsTest(Vector{0x0001}, 10, "1"));
		EXPECT_TRUE(ToCharsTest(Vector{0x000C}, 10, "12"));
		EXPECT_TRUE(ToCharsTest(Vector{0x007B}, 10, "123"));
		EXPECT_TRUE(ToCharsTest(Vector{0x04D2}, 10, "1234"));
		EXPECT_TRUE(ToCharsTest(Vector{0x3039}, 10, "12345"));
		EXPECT_TRUE(ToCharsTest(Vector{0xE240, 0x0001}, 10, "123456"));
		EXPECT_TRUE(ToCharsTest(Vector{0xD687, 0x0012}, 10, "1234567"));
		EXPECT_TRUE(ToCharsTest(Vector{0x614E, 0x00BC}, 10, "12345678"));
		EXPECT_TRUE(ToCharsTest(Vector{0xCD15, 0x075B}, 10, "123456789"));
		EXPECT_TRUE(ToCharsTest(Vector{0x02D2, 0x4996}, 10, "1234567890"));
		EXPECT_TRUE(ToCharsTest(Vector{0x1C35, 0xDFDC, 0x0002}, 10, "12345678901"));
		EXPECT_TRUE(ToCharsTest(Vector{0x1A14, 0xBE99, 0x001C}, 10, "123456789012"));
		EXPECT_TRUE(ToCharsTest(Vector{0x04CB, 0x71FB, 0x011F}, 10, "1234567890123"));
		EXPECT_TRUE(ToCharsTest(Vector{0x2FF2, 0x73CE, 0x0B3A}, 10, "12345678901234"));
		EXPECT_TRUE(ToCharsTest(Vector{0xDF79, 0x860D, 0x7048}, 10, "123456789012345"));
		EXPECT_TRUE(ToCharsTest(Vector{0xBAC0, 0x3C8A, 0x62D5, 0x0004}, 10, "1234567890123456"));
		EXPECT_TRUE(ToCharsTest(Vector{0x4B87, 0x5D6B, 0xDC54, 0x002B}, 10, "12345678901234567"));
		EXPECT_TRUE(ToCharsTest(Vector{0xF34E, 0xA630, 0x9B4B, 0x01B6}, 10, "123456789012345678"));
		EXPECT_TRUE(ToCharsTest(Vector{0x8115, 0x7DE9, 0x10F4, 0x1122}, 10, "1234567890123456789"));
		EXPECT_TRUE(ToCharsTest(Vector{0x0AD2, 0xEB1F, 0xA98C, 0xAB54}, 10, "12345678901234567890"));
		EXPECT_TRUE(ToCharsTest(Vector{0x6C35, 0x2F36, 0x9F81, 0xB14E, 0x0006}, 10, "123456789012345678901"));
		EXPECT_TRUE(ToCharsTest(Vector{0x3A14, 0xD820, 0x3B0B, 0xED12, 0x0042}, 10, "1234567890123456789012"));
		EXPECT_TRUE(ToCharsTest(Vector{0x44CB, 0x7142, 0x4E76, 0x42B6, 0x029D}, 10, "12345678901234567890123"));
		EXPECT_TRUE(ToCharsTest(Vector{0xAFF2, 0x6C96, 0x10A0, 0x9B1F, 0x1A24}, 10, "123456789012345678901234"));
		EXPECT_TRUE(ToCharsTest(Vector{0xDF79, 0x3DE2, 0xA644, 0x0F36, 0x056E, 0x0001}, 10, "1234567890123456789012345"));
		EXPECT_TRUE(ToCharsTest(Vector{0xBAC0, 0x6ADC, 0x7EAA, 0x9822, 0x364C, 0x000A}, 10, "12345678901234567890123456"));
		EXPECT_TRUE(ToCharsTest(Vector{0x4B87, 0x2C9F, 0xF2A8, 0xF158, 0x1EFD, 0x0066}, 10, "123456789012345678901234567"));
		EXPECT_TRUE(ToCharsTest(Vector{0xF34E, 0xBE38, 0x7A91, 0x6D79, 0x35EB, 0x03FD}, 10, "1234567890123456789012345678"));
		EXPECT_TRUE(ToCharsTest(Vector{0x8115, 0x6E39, 0xC9B1, 0x46BE, 0x1B32, 0x27E4}, 10, "12345678901234567890123456789"));
	}
	// 219ms
	{
		using Vector = std::vector<hamon::uint32_t>;
		EXPECT_TRUE(ToCharsTest(Vector{0x00000000}, 10, "0"));
		EXPECT_TRUE(ToCharsTest(Vector{0x00000001}, 10, "1"));
		EXPECT_TRUE(ToCharsTest(Vector{0x0000000C}, 10, "12"));
		EXPECT_TRUE(ToCharsTest(Vector{0x0000007B}, 10, "123"));
		EXPECT_TRUE(ToCharsTest(Vector{0x000004D2}, 10, "1234"));
		EXPECT_TRUE(ToCharsTest(Vector{0x00003039}, 10, "12345"));
		EXPECT_TRUE(ToCharsTest(Vector{0x0001E240}, 10, "123456"));
		EXPECT_TRUE(ToCharsTest(Vector{0x0012D687}, 10, "1234567"));
		EXPECT_TRUE(ToCharsTest(Vector{0x00BC614E}, 10, "12345678"));
		EXPECT_TRUE(ToCharsTest(Vector{0x075BCD15}, 10, "123456789"));
		EXPECT_TRUE(ToCharsTest(Vector{0x499602D2}, 10, "1234567890"));
		EXPECT_TRUE(ToCharsTest(Vector{0xDFDC1C35, 0x00000002}, 10, "12345678901"));
		EXPECT_TRUE(ToCharsTest(Vector{0xBE991A14, 0x0000001C}, 10, "123456789012"));
		EXPECT_TRUE(ToCharsTest(Vector{0x71FB04CB, 0x0000011F}, 10, "1234567890123"));
		EXPECT_TRUE(ToCharsTest(Vector{0x73CE2FF2, 0x00000B3A}, 10, "12345678901234"));
		EXPECT_TRUE(ToCharsTest(Vector{0x860DDF79, 0x00007048}, 10, "123456789012345"));
		EXPECT_TRUE(ToCharsTest(Vector{0x3C8ABAC0, 0x000462D5}, 10, "1234567890123456"));
		EXPECT_TRUE(ToCharsTest(Vector{0x5D6B4B87, 0x002BDC54}, 10, "12345678901234567"));
		EXPECT_TRUE(ToCharsTest(Vector{0xA630F34E, 0x01B69B4B}, 10, "123456789012345678"));
		EXPECT_TRUE(ToCharsTest(Vector{0x7DE98115, 0x112210F4}, 10, "1234567890123456789"));
		EXPECT_TRUE(ToCharsTest(Vector{0xEB1F0AD2, 0xAB54A98C}, 10, "12345678901234567890"));
		EXPECT_TRUE(ToCharsTest(Vector{0x2F366C35, 0xB14E9F81, 0x00000006}, 10, "123456789012345678901"));
		EXPECT_TRUE(ToCharsTest(Vector{0xD8203A14, 0xED123B0B, 0x00000042}, 10, "1234567890123456789012"));
		EXPECT_TRUE(ToCharsTest(Vector{0x714244CB, 0x42B64E76, 0x0000029D}, 10, "12345678901234567890123"));
		EXPECT_TRUE(ToCharsTest(Vector{0x6C96AFF2, 0x9B1F10A0, 0x00001A24}, 10, "123456789012345678901234"));
		EXPECT_TRUE(ToCharsTest(Vector{0x3DE2DF79, 0x0F36A644, 0x0001056E}, 10, "1234567890123456789012345"));
		EXPECT_TRUE(ToCharsTest(Vector{0x6ADCBAC0, 0x98227EAA, 0x000A364C}, 10, "12345678901234567890123456"));
		EXPECT_TRUE(ToCharsTest(Vector{0x2C9F4B87, 0xF158F2A8, 0x00661EFD}, 10, "123456789012345678901234567"));
		EXPECT_TRUE(ToCharsTest(Vector{0xBE38F34E, 0x6D797A91, 0x03FD35EB}, 10, "1234567890123456789012345678"));
		EXPECT_TRUE(ToCharsTest(Vector{0x6E398115, 0x46BEC9B1, 0x27E41B32}, 10, "12345678901234567890123456789"));
	}
	// 348ms
	{
		using Vector = std::vector<hamon::uint64_t>;
		EXPECT_TRUE(ToCharsTest(Vector{0x0000000000000000}, 10, "0"));
		EXPECT_TRUE(ToCharsTest(Vector{0x0000000000000001}, 10, "1"));
		EXPECT_TRUE(ToCharsTest(Vector{0x000000000000000C}, 10, "12"));
		EXPECT_TRUE(ToCharsTest(Vector{0x000000000000007B}, 10, "123"));
		EXPECT_TRUE(ToCharsTest(Vector{0x00000000000004D2}, 10, "1234"));
		EXPECT_TRUE(ToCharsTest(Vector{0x0000000000003039}, 10, "12345"));
		EXPECT_TRUE(ToCharsTest(Vector{0x000000000001E240}, 10, "123456"));
		EXPECT_TRUE(ToCharsTest(Vector{0x000000000012D687}, 10, "1234567"));
		EXPECT_TRUE(ToCharsTest(Vector{0x0000000000BC614E}, 10, "12345678"));
		EXPECT_TRUE(ToCharsTest(Vector{0x00000000075BCD15}, 10, "123456789"));
		EXPECT_TRUE(ToCharsTest(Vector{0x00000000499602D2}, 10, "1234567890"));
		EXPECT_TRUE(ToCharsTest(Vector{0x00000002DFDC1C35}, 10, "12345678901"));
		EXPECT_TRUE(ToCharsTest(Vector{0x0000001CBE991A14}, 10, "123456789012"));
		EXPECT_TRUE(ToCharsTest(Vector{0x0000011F71FB04CB}, 10, "1234567890123"));
		EXPECT_TRUE(ToCharsTest(Vector{0x00000B3A73CE2FF2}, 10, "12345678901234"));
		EXPECT_TRUE(ToCharsTest(Vector{0x00007048860DDF79}, 10, "123456789012345"));
		EXPECT_TRUE(ToCharsTest(Vector{0x000462D53C8ABAC0}, 10, "1234567890123456"));
		EXPECT_TRUE(ToCharsTest(Vector{0x002BDC545D6B4B87}, 10, "12345678901234567"));
		EXPECT_TRUE(ToCharsTest(Vector{0x01B69B4BA630F34E}, 10, "123456789012345678"));
		EXPECT_TRUE(ToCharsTest(Vector{0x112210F47DE98115}, 10, "1234567890123456789"));
		EXPECT_TRUE(ToCharsTest(Vector{0xAB54A98CEB1F0AD2}, 10, "12345678901234567890"));
		EXPECT_TRUE(ToCharsTest(Vector{0xB14E9F812F366C35, 0x0000000000000006}, 10, "123456789012345678901"));
		EXPECT_TRUE(ToCharsTest(Vector{0xED123B0BD8203A14, 0x0000000000000042}, 10, "1234567890123456789012"));
		EXPECT_TRUE(ToCharsTest(Vector{0x42B64E76714244CB, 0x000000000000029D}, 10, "12345678901234567890123"));
		EXPECT_TRUE(ToCharsTest(Vector{0x9B1F10A06C96AFF2, 0x0000000000001A24}, 10, "123456789012345678901234"));
		EXPECT_TRUE(ToCharsTest(Vector{0x0F36A6443DE2DF79, 0x000000000001056E}, 10, "1234567890123456789012345"));
		EXPECT_TRUE(ToCharsTest(Vector{0x98227EAA6ADCBAC0, 0x00000000000A364C}, 10, "12345678901234567890123456"));
		EXPECT_TRUE(ToCharsTest(Vector{0xF158F2A82C9F4B87, 0x0000000000661EFD}, 10, "123456789012345678901234567"));
		EXPECT_TRUE(ToCharsTest(Vector{0x6D797A91BE38F34E, 0x0000000003FD35EB}, 10, "1234567890123456789012345678"));
		EXPECT_TRUE(ToCharsTest(Vector{0x46BEC9B16E398115, 0x0000000027E41B32}, 10, "12345678901234567890123456789"));
	}
	// 440ms
	{
		using Vector = std::vector<hamon::uint8_t>;
		Vector const value {0xF0, 0xDE, 0xBC, 0x9A, 0x78, 0x56, 0x34, 0x12}; 
		EXPECT_TRUE(ToCharsTest(value,  2, "1001000110100010101100111100010011010101111001101111011110000"));
		EXPECT_TRUE(ToCharsTest(value,  3, "22201222011201200202210002220221122120"));
		EXPECT_TRUE(ToCharsTest(value,  4, "1020310111213202122233031323300"));
		EXPECT_TRUE(ToCharsTest(value,  5, "42000442104032331212242240"));
		EXPECT_TRUE(ToCharsTest(value,  6, "135444110402414144034240"));
		EXPECT_TRUE(ToCharsTest(value,  7, "2230356425160551126205"));
		EXPECT_TRUE(ToCharsTest(value,  8, "110642547423257157360"));
		EXPECT_TRUE(ToCharsTest(value,  9, "8658151622702827576"));
		EXPECT_TRUE(ToCharsTest(value, 10, "1311768467463790320"));
		EXPECT_TRUE(ToCharsTest(value, 11, "26603294a9a89a7456"));
		EXPECT_TRUE(ToCharsTest(value, 12, "7118369118a902980"));
		EXPECT_TRUE(ToCharsTest(value, 13, "1c82091a91c94389a"));
		EXPECT_TRUE(ToCharsTest(value, 14, "8609a3282abbdcac"));
		EXPECT_TRUE(ToCharsTest(value, 15, "2ee03c32ad644ad0"));
		EXPECT_TRUE(ToCharsTest(value, 16, "123456789abcdef0"));
		EXPECT_TRUE(ToCharsTest(value, 17, "7d785d21d122679"));
		EXPECT_TRUE(ToCharsTest(value, 18, "38hge12hbcg8eh6"));
		EXPECT_TRUE(ToCharsTest(value, 19, "1c3ce7389162864"));
		EXPECT_TRUE(ToCharsTest(value, 20, "g0527ff428dfg0"));
		EXPECT_TRUE(ToCharsTest(value, 21, "8a6jfhgje8c8gc"));
		EXPECT_TRUE(ToCharsTest(value, 22, "4e0l080f20eej6"));
		EXPECT_TRUE(ToCharsTest(value, 23, "2djglk7e9hk71g"));
		EXPECT_TRUE(ToCharsTest(value, 24, "1bm160eim0i8a0"));
		EXPECT_TRUE(ToCharsTest(value, 25, "m04m5khi77eck"));
		EXPECT_TRUE(ToCharsTest(value, 26, "dja81l3gogiba"));
		EXPECT_TRUE(ToCharsTest(value, 27, "8jq4jikl2ophf"));
		EXPECT_TRUE(ToCharsTest(value, 28, "5i4jlj7grodjc"));
		EXPECT_TRUE(ToCharsTest(value, 29, "3kf06i3d918p3"));
		EXPECT_TRUE(ToCharsTest(value, 30, "2e1em88jcdle0"));
		EXPECT_TRUE(ToCharsTest(value, 31, "1kjdmqg2jplbf"));
		EXPECT_TRUE(ToCharsTest(value, 32, "14d2mf2dbpnng"));
		EXPECT_TRUE(ToCharsTest(value, 33, "pvfsujwmda96"));
		EXPECT_TRUE(ToCharsTest(value, 34, "inelk2b6ha3q"));
		EXPECT_TRUE(ToCharsTest(value, 35, "dkihnh24hce5"));
		EXPECT_TRUE(ToCharsTest(value, 36, "9ys742pps3qo"));
	}
	// 544ms
	{
		using Vector = std::vector<hamon::uint32_t>;
		Vector const value {0x9ABCDEF0, 0x12345678}; 
		EXPECT_TRUE(ToCharsTest(value,  2, "1001000110100010101100111100010011010101111001101111011110000"));
		EXPECT_TRUE(ToCharsTest(value,  3, "22201222011201200202210002220221122120"));
		EXPECT_TRUE(ToCharsTest(value,  4, "1020310111213202122233031323300"));
		EXPECT_TRUE(ToCharsTest(value,  5, "42000442104032331212242240"));
		EXPECT_TRUE(ToCharsTest(value,  6, "135444110402414144034240"));
		EXPECT_TRUE(ToCharsTest(value,  7, "2230356425160551126205"));
		EXPECT_TRUE(ToCharsTest(value,  8, "110642547423257157360"));
		EXPECT_TRUE(ToCharsTest(value,  9, "8658151622702827576"));
		EXPECT_TRUE(ToCharsTest(value, 10, "1311768467463790320"));
		EXPECT_TRUE(ToCharsTest(value, 11, "26603294a9a89a7456"));
		EXPECT_TRUE(ToCharsTest(value, 12, "7118369118a902980"));
		EXPECT_TRUE(ToCharsTest(value, 13, "1c82091a91c94389a"));
		EXPECT_TRUE(ToCharsTest(value, 14, "8609a3282abbdcac"));
		EXPECT_TRUE(ToCharsTest(value, 15, "2ee03c32ad644ad0"));
		EXPECT_TRUE(ToCharsTest(value, 16, "123456789abcdef0"));
		EXPECT_TRUE(ToCharsTest(value, 17, "7d785d21d122679"));
		EXPECT_TRUE(ToCharsTest(value, 18, "38hge12hbcg8eh6"));
		EXPECT_TRUE(ToCharsTest(value, 19, "1c3ce7389162864"));
		EXPECT_TRUE(ToCharsTest(value, 20, "g0527ff428dfg0"));
		EXPECT_TRUE(ToCharsTest(value, 21, "8a6jfhgje8c8gc"));
		EXPECT_TRUE(ToCharsTest(value, 22, "4e0l080f20eej6"));
		EXPECT_TRUE(ToCharsTest(value, 23, "2djglk7e9hk71g"));
		EXPECT_TRUE(ToCharsTest(value, 24, "1bm160eim0i8a0"));
		EXPECT_TRUE(ToCharsTest(value, 25, "m04m5khi77eck"));
		EXPECT_TRUE(ToCharsTest(value, 26, "dja81l3gogiba"));
		EXPECT_TRUE(ToCharsTest(value, 27, "8jq4jikl2ophf"));
		EXPECT_TRUE(ToCharsTest(value, 28, "5i4jlj7grodjc"));
		EXPECT_TRUE(ToCharsTest(value, 29, "3kf06i3d918p3"));
		EXPECT_TRUE(ToCharsTest(value, 30, "2e1em88jcdle0"));
		EXPECT_TRUE(ToCharsTest(value, 31, "1kjdmqg2jplbf"));
		EXPECT_TRUE(ToCharsTest(value, 32, "14d2mf2dbpnng"));
		EXPECT_TRUE(ToCharsTest(value, 33, "pvfsujwmda96"));
		EXPECT_TRUE(ToCharsTest(value, 34, "inelk2b6ha3q"));
		EXPECT_TRUE(ToCharsTest(value, 35, "dkihnh24hce5"));
		EXPECT_TRUE(ToCharsTest(value, 36, "9ys742pps3qo"));
	}
	// 710ms
	{
		using Vector = std::vector<hamon::uint64_t>;
		Vector const value {0x123456789ABCDEF0}; 
		EXPECT_TRUE(ToCharsTest(value,  2, "1001000110100010101100111100010011010101111001101111011110000"));
		EXPECT_TRUE(ToCharsTest(value,  3, "22201222011201200202210002220221122120"));
		EXPECT_TRUE(ToCharsTest(value,  4, "1020310111213202122233031323300"));
		EXPECT_TRUE(ToCharsTest(value,  5, "42000442104032331212242240"));
		EXPECT_TRUE(ToCharsTest(value,  6, "135444110402414144034240"));
		EXPECT_TRUE(ToCharsTest(value,  7, "2230356425160551126205"));
		EXPECT_TRUE(ToCharsTest(value,  8, "110642547423257157360"));
		EXPECT_TRUE(ToCharsTest(value,  9, "8658151622702827576"));
		EXPECT_TRUE(ToCharsTest(value, 10, "1311768467463790320"));
		EXPECT_TRUE(ToCharsTest(value, 11, "26603294a9a89a7456"));
		EXPECT_TRUE(ToCharsTest(value, 12, "7118369118a902980"));
		EXPECT_TRUE(ToCharsTest(value, 13, "1c82091a91c94389a"));
		EXPECT_TRUE(ToCharsTest(value, 14, "8609a3282abbdcac"));
		EXPECT_TRUE(ToCharsTest(value, 15, "2ee03c32ad644ad0"));
		EXPECT_TRUE(ToCharsTest(value, 16, "123456789abcdef0"));
		EXPECT_TRUE(ToCharsTest(value, 17, "7d785d21d122679"));
		EXPECT_TRUE(ToCharsTest(value, 18, "38hge12hbcg8eh6"));
		EXPECT_TRUE(ToCharsTest(value, 19, "1c3ce7389162864"));
		EXPECT_TRUE(ToCharsTest(value, 20, "g0527ff428dfg0"));
		EXPECT_TRUE(ToCharsTest(value, 21, "8a6jfhgje8c8gc"));
		EXPECT_TRUE(ToCharsTest(value, 22, "4e0l080f20eej6"));
		EXPECT_TRUE(ToCharsTest(value, 23, "2djglk7e9hk71g"));
		EXPECT_TRUE(ToCharsTest(value, 24, "1bm160eim0i8a0"));
		EXPECT_TRUE(ToCharsTest(value, 25, "m04m5khi77eck"));
		EXPECT_TRUE(ToCharsTest(value, 26, "dja81l3gogiba"));
		EXPECT_TRUE(ToCharsTest(value, 27, "8jq4jikl2ophf"));
		EXPECT_TRUE(ToCharsTest(value, 28, "5i4jlj7grodjc"));
		EXPECT_TRUE(ToCharsTest(value, 29, "3kf06i3d918p3"));
		EXPECT_TRUE(ToCharsTest(value, 30, "2e1em88jcdle0"));
		EXPECT_TRUE(ToCharsTest(value, 31, "1kjdmqg2jplbf"));
		EXPECT_TRUE(ToCharsTest(value, 32, "14d2mf2dbpnng"));
		EXPECT_TRUE(ToCharsTest(value, 33, "pvfsujwmda96"));
		EXPECT_TRUE(ToCharsTest(value, 34, "inelk2b6ha3q"));
		EXPECT_TRUE(ToCharsTest(value, 35, "dkihnh24hce5"));
		EXPECT_TRUE(ToCharsTest(value, 36, "9ys742pps3qo"));
	}
	// 793ms
	{
		using Vector = hamon::array<hamon::uint8_t, 12>;
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x00}, 10, "0"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x01}, 10, "1"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x0C}, 10, "12"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x7B}, 10, "123"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xD2, 0x04}, 10, "1234"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x39, 0x30}, 10, "12345"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x40, 0xE2, 0x01}, 10, "123456"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x87, 0xD6, 0x12}, 10, "1234567"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x4E, 0x61, 0xBC}, 10, "12345678"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x15, 0xCD, 0x5B, 0x07}, 10, "123456789"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xD2, 0x02, 0x96, 0x49}, 10, "1234567890"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x35, 0x1C, 0xDC, 0xDF, 0x02}, 10, "12345678901"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x14, 0x1A, 0x99, 0xBE, 0x1C}, 10, "123456789012"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xCB, 0x04, 0xFB, 0x71, 0x1F, 0x01}, 10, "1234567890123"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xF2, 0x2F, 0xCE, 0x73, 0x3A, 0x0B}, 10, "12345678901234"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x79, 0xDF, 0x0D, 0x86, 0x48, 0x70}, 10, "123456789012345"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xC0, 0xBA, 0x8A, 0x3C, 0xD5, 0x62, 0x04}, 10, "1234567890123456"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x87, 0x4B, 0x6B, 0x5D, 0x54, 0xDC, 0x2B}, 10, "12345678901234567"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x4E, 0xF3, 0x30, 0xA6, 0x4B, 0x9B, 0xB6, 0x01}, 10, "123456789012345678"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x15, 0x81, 0xE9, 0x7D, 0xF4, 0x10, 0x22, 0x11}, 10, "1234567890123456789"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xD2, 0x0A, 0x1F, 0xEB, 0x8C, 0xA9, 0x54, 0xAB}, 10, "12345678901234567890"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x35, 0x6C, 0x36, 0x2F, 0x81, 0x9F, 0x4E, 0xB1, 0x06}, 10, "123456789012345678901"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x14, 0x3A, 0x20, 0xD8, 0x0B, 0x3B, 0x12, 0xED, 0x42}, 10, "1234567890123456789012"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xCB, 0x44, 0x42, 0x71, 0x76, 0x4E, 0xB6, 0x42, 0x9D, 0x02}, 10, "12345678901234567890123"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xF2, 0xAF, 0x96, 0x6C, 0xA0, 0x10, 0x1F, 0x9B, 0x24, 0x1A}, 10, "123456789012345678901234"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x79, 0xDF, 0xE2, 0x3D, 0x44, 0xA6, 0x36, 0x0F, 0x6E, 0x05, 0x01}, 10, "1234567890123456789012345"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xC0, 0xBA, 0xDC, 0x6A, 0xAA, 0x7E, 0x22, 0x98, 0x4C, 0x36, 0x0A}, 10, "12345678901234567890123456"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x87, 0x4B, 0x9F, 0x2C, 0xA8, 0xF2, 0x58, 0xF1, 0xFD, 0x1E, 0x66}, 10, "123456789012345678901234567"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x4E, 0xF3, 0x38, 0xBE, 0x91, 0x7A, 0x79, 0x6D, 0xEB, 0x35, 0xFD, 0x03}, 10, "1234567890123456789012345678"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x15, 0x81, 0x39, 0x6E, 0xB1, 0xC9, 0xBE, 0x46, 0x32, 0x1B, 0xE4, 0x27}, 10, "12345678901234567890123456789"));
	}
	// 836ms
	{
		using Vector = hamon::array<hamon::uint16_t, 6>;
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x0000}, 10, "0"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x0001}, 10, "1"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x000C}, 10, "12"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x007B}, 10, "123"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x04D2}, 10, "1234"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x3039}, 10, "12345"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xE240, 0x0001}, 10, "123456"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xD687, 0x0012}, 10, "1234567"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x614E, 0x00BC}, 10, "12345678"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xCD15, 0x075B}, 10, "123456789"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x02D2, 0x4996}, 10, "1234567890"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x1C35, 0xDFDC, 0x0002}, 10, "12345678901"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x1A14, 0xBE99, 0x001C}, 10, "123456789012"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x04CB, 0x71FB, 0x011F}, 10, "1234567890123"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x2FF2, 0x73CE, 0x0B3A}, 10, "12345678901234"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xDF79, 0x860D, 0x7048}, 10, "123456789012345"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xBAC0, 0x3C8A, 0x62D5, 0x0004}, 10, "1234567890123456"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x4B87, 0x5D6B, 0xDC54, 0x002B}, 10, "12345678901234567"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xF34E, 0xA630, 0x9B4B, 0x01B6}, 10, "123456789012345678"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x8115, 0x7DE9, 0x10F4, 0x1122}, 10, "1234567890123456789"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x0AD2, 0xEB1F, 0xA98C, 0xAB54}, 10, "12345678901234567890"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x6C35, 0x2F36, 0x9F81, 0xB14E, 0x0006}, 10, "123456789012345678901"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x3A14, 0xD820, 0x3B0B, 0xED12, 0x0042}, 10, "1234567890123456789012"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x44CB, 0x7142, 0x4E76, 0x42B6, 0x029D}, 10, "12345678901234567890123"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xAFF2, 0x6C96, 0x10A0, 0x9B1F, 0x1A24}, 10, "123456789012345678901234"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xDF79, 0x3DE2, 0xA644, 0x0F36, 0x056E, 0x0001}, 10, "1234567890123456789012345"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xBAC0, 0x6ADC, 0x7EAA, 0x9822, 0x364C, 0x000A}, 10, "12345678901234567890123456"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x4B87, 0x2C9F, 0xF2A8, 0xF158, 0x1EFD, 0x0066}, 10, "123456789012345678901234567"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xF34E, 0xBE38, 0x7A91, 0x6D79, 0x35EB, 0x03FD}, 10, "1234567890123456789012345678"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x8115, 0x6E39, 0xC9B1, 0x46BE, 0x1B32, 0x27E4}, 10, "12345678901234567890123456789"));
	}
	// 831ms
	{
		using Vector = hamon::array<hamon::uint32_t, 3>;
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x00000000}, 10, "0"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x00000001}, 10, "1"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x0000000C}, 10, "12"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x0000007B}, 10, "123"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x000004D2}, 10, "1234"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x00003039}, 10, "12345"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x0001E240}, 10, "123456"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x0012D687}, 10, "1234567"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x00BC614E}, 10, "12345678"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x075BCD15}, 10, "123456789"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x499602D2}, 10, "1234567890"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xDFDC1C35, 0x00000002}, 10, "12345678901"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xBE991A14, 0x0000001C}, 10, "123456789012"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x71FB04CB, 0x0000011F}, 10, "1234567890123"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x73CE2FF2, 0x00000B3A}, 10, "12345678901234"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x860DDF79, 0x00007048}, 10, "123456789012345"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x3C8ABAC0, 0x000462D5}, 10, "1234567890123456"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x5D6B4B87, 0x002BDC54}, 10, "12345678901234567"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xA630F34E, 0x01B69B4B}, 10, "123456789012345678"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x7DE98115, 0x112210F4}, 10, "1234567890123456789"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xEB1F0AD2, 0xAB54A98C}, 10, "12345678901234567890"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x2F366C35, 0xB14E9F81, 0x00000006}, 10, "123456789012345678901"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xD8203A14, 0xED123B0B, 0x00000042}, 10, "1234567890123456789012"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x714244CB, 0x42B64E76, 0x0000029D}, 10, "12345678901234567890123"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x6C96AFF2, 0x9B1F10A0, 0x00001A24}, 10, "123456789012345678901234"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x3DE2DF79, 0x0F36A644, 0x0001056E}, 10, "1234567890123456789012345"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x6ADCBAC0, 0x98227EAA, 0x000A364C}, 10, "12345678901234567890123456"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x2C9F4B87, 0xF158F2A8, 0x00661EFD}, 10, "123456789012345678901234567"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xBE38F34E, 0x6D797A91, 0x03FD35EB}, 10, "1234567890123456789012345678"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x6E398115, 0x46BEC9B1, 0x27E41B32}, 10, "12345678901234567890123456789"));
	}
	// 859ms
	{
		using Vector = hamon::array<hamon::uint64_t, 2>;
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x0000000000000000}, 10, "0"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x0000000000000001}, 10, "1"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x000000000000000C}, 10, "12"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x000000000000007B}, 10, "123"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x00000000000004D2}, 10, "1234"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x0000000000003039}, 10, "12345"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x000000000001E240}, 10, "123456"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x000000000012D687}, 10, "1234567"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x0000000000BC614E}, 10, "12345678"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x00000000075BCD15}, 10, "123456789"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x00000000499602D2}, 10, "1234567890"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x00000002DFDC1C35}, 10, "12345678901"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x0000001CBE991A14}, 10, "123456789012"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x0000011F71FB04CB}, 10, "1234567890123"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x00000B3A73CE2FF2}, 10, "12345678901234"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x00007048860DDF79}, 10, "123456789012345"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x000462D53C8ABAC0}, 10, "1234567890123456"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x002BDC545D6B4B87}, 10, "12345678901234567"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x01B69B4BA630F34E}, 10, "123456789012345678"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x112210F47DE98115}, 10, "1234567890123456789"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xAB54A98CEB1F0AD2}, 10, "12345678901234567890"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xB14E9F812F366C35, 0x0000000000000006}, 10, "123456789012345678901"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xED123B0BD8203A14, 0x0000000000000042}, 10, "1234567890123456789012"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x42B64E76714244CB, 0x000000000000029D}, 10, "12345678901234567890123"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x9B1F10A06C96AFF2, 0x0000000000001A24}, 10, "123456789012345678901234"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x0F36A6443DE2DF79, 0x000000000001056E}, 10, "1234567890123456789012345"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x98227EAA6ADCBAC0, 0x00000000000A364C}, 10, "12345678901234567890123456"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0xF158F2A82C9F4B87, 0x0000000000661EFD}, 10, "123456789012345678901234567"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x6D797A91BE38F34E, 0x0000000003FD35EB}, 10, "1234567890123456789012345678"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(Vector{0x46BEC9B16E398115, 0x0000000027E41B32}, 10, "12345678901234567890123456789"));
	}
	// 892ms
	{
		using Vector = hamon::array<hamon::uint8_t, 8>;
		HAMON_CXX14_CONSTEXPR Vector const value {0xF0, 0xDE, 0xBC, 0x9A, 0x78, 0x56, 0x34, 0x12}; 
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value,  2, "1001000110100010101100111100010011010101111001101111011110000"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value,  3, "22201222011201200202210002220221122120"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value,  4, "1020310111213202122233031323300"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value,  5, "42000442104032331212242240"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value,  6, "135444110402414144034240"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value,  7, "2230356425160551126205"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value,  8, "110642547423257157360"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value,  9, "8658151622702827576"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 10, "1311768467463790320"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 11, "26603294a9a89a7456"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 12, "7118369118a902980"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 13, "1c82091a91c94389a"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 14, "8609a3282abbdcac"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 15, "2ee03c32ad644ad0"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 16, "123456789abcdef0"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 17, "7d785d21d122679"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 18, "38hge12hbcg8eh6"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 19, "1c3ce7389162864"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 20, "g0527ff428dfg0"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 21, "8a6jfhgje8c8gc"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 22, "4e0l080f20eej6"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 23, "2djglk7e9hk71g"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 24, "1bm160eim0i8a0"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 25, "m04m5khi77eck"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 26, "dja81l3gogiba"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 27, "8jq4jikl2ophf"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 28, "5i4jlj7grodjc"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 29, "3kf06i3d918p3"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 30, "2e1em88jcdle0"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 31, "1kjdmqg2jplbf"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 32, "14d2mf2dbpnng"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 33, "pvfsujwmda96"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 34, "inelk2b6ha3q"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 35, "dkihnh24hce5"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 36, "9ys742pps3qo"));
	}
	// 906ms
	{
		using Vector = hamon::array<hamon::uint32_t, 2>;
		HAMON_CXX14_CONSTEXPR Vector const value {0x9ABCDEF0, 0x12345678}; 
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value,  2, "1001000110100010101100111100010011010101111001101111011110000"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value,  3, "22201222011201200202210002220221122120"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value,  4, "1020310111213202122233031323300"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value,  5, "42000442104032331212242240"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value,  6, "135444110402414144034240"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value,  7, "2230356425160551126205"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value,  8, "110642547423257157360"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value,  9, "8658151622702827576"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 10, "1311768467463790320"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 11, "26603294a9a89a7456"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 12, "7118369118a902980"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 13, "1c82091a91c94389a"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 14, "8609a3282abbdcac"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 15, "2ee03c32ad644ad0"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 16, "123456789abcdef0"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 17, "7d785d21d122679"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 18, "38hge12hbcg8eh6"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 19, "1c3ce7389162864"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 20, "g0527ff428dfg0"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 21, "8a6jfhgje8c8gc"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 22, "4e0l080f20eej6"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 23, "2djglk7e9hk71g"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 24, "1bm160eim0i8a0"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 25, "m04m5khi77eck"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 26, "dja81l3gogiba"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 27, "8jq4jikl2ophf"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 28, "5i4jlj7grodjc"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 29, "3kf06i3d918p3"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 30, "2e1em88jcdle0"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 31, "1kjdmqg2jplbf"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 32, "14d2mf2dbpnng"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 33, "pvfsujwmda96"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 34, "inelk2b6ha3q"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 35, "dkihnh24hce5"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 36, "9ys742pps3qo"));
	}
	// 941ms
	{
		using Vector = hamon::array<hamon::uint64_t, 2>;
		HAMON_CXX14_CONSTEXPR Vector const value {0x123456789ABCDEF0}; 
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value,  2, "1001000110100010101100111100010011010101111001101111011110000"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value,  3, "22201222011201200202210002220221122120"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value,  4, "1020310111213202122233031323300"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value,  5, "42000442104032331212242240"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value,  6, "135444110402414144034240"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value,  7, "2230356425160551126205"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value,  8, "110642547423257157360"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value,  9, "8658151622702827576"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 10, "1311768467463790320"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 11, "26603294a9a89a7456"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 12, "7118369118a902980"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 13, "1c82091a91c94389a"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 14, "8609a3282abbdcac"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 15, "2ee03c32ad644ad0"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 16, "123456789abcdef0"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 17, "7d785d21d122679"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 18, "38hge12hbcg8eh6"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 19, "1c3ce7389162864"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 20, "g0527ff428dfg0"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 21, "8a6jfhgje8c8gc"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 22, "4e0l080f20eej6"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 23, "2djglk7e9hk71g"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 24, "1bm160eim0i8a0"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 25, "m04m5khi77eck"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 26, "dja81l3gogiba"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 27, "8jq4jikl2ophf"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 28, "5i4jlj7grodjc"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 29, "3kf06i3d918p3"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 30, "2e1em88jcdle0"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 31, "1kjdmqg2jplbf"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 32, "14d2mf2dbpnng"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 33, "pvfsujwmda96"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 34, "inelk2b6ha3q"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 35, "dkihnh24hce5"));
		/*HAMON_CXX14_CONSTEXPR_*/EXPECT_TRUE(ToCharsTest(value, 36, "9ys742pps3qo"));
	}
}

#undef VERIFY

}	// namespace bigint_algo_to_chars_test

}	// namespace hamon_bigint_test
