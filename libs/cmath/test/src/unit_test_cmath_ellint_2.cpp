/**
 *	@file	unit_test_cmath_ellint_2.cpp
 *
 *	@brief	ellint_2 のテスト
 */

#include <hamon/cmath/ellint_2.hpp>
#include <hamon/cmath/isnan.hpp>
//#include <hamon/cmath/isinf.hpp>
#include <hamon/cmath/abs.hpp>
#include <hamon/type_traits/is_same.hpp>
#include <hamon/limits.hpp>
#include <hamon/numbers.hpp>
#include <gtest/gtest.h>
#include "constexpr_test.hpp"

namespace hamon_cmath_test
{

namespace ellint_2_test
{

static_assert(hamon::is_same<float,       decltype(hamon::ellint_2(0.0f, 0.0f))>::value, "");
static_assert(hamon::is_same<double,      decltype(hamon::ellint_2(0.0f, 0.0 ))>::value, "");
static_assert(hamon::is_same<long double, decltype(hamon::ellint_2(0.0f, 0.0l))>::value, "");
static_assert(hamon::is_same<double,      decltype(hamon::ellint_2(0.0f, 0   ))>::value, "");
static_assert(hamon::is_same<double,      decltype(hamon::ellint_2(0.0 , 0.0f))>::value, "");
static_assert(hamon::is_same<double,      decltype(hamon::ellint_2(0.0 , 0.0 ))>::value, "");
static_assert(hamon::is_same<long double, decltype(hamon::ellint_2(0.0 , 0.0l))>::value, "");
static_assert(hamon::is_same<double,      decltype(hamon::ellint_2(0.0 , 0   ))>::value, "");
static_assert(hamon::is_same<long double, decltype(hamon::ellint_2(0.0l, 0.0f))>::value, "");
static_assert(hamon::is_same<long double, decltype(hamon::ellint_2(0.0l, 0.0 ))>::value, "");
static_assert(hamon::is_same<long double, decltype(hamon::ellint_2(0.0l, 0.0l))>::value, "");
static_assert(hamon::is_same<long double, decltype(hamon::ellint_2(0.0l, 0   ))>::value, "");
static_assert(hamon::is_same<double,      decltype(hamon::ellint_2(0   , 0.0f))>::value, "");
static_assert(hamon::is_same<double,      decltype(hamon::ellint_2(0   , 0.0 ))>::value, "");
static_assert(hamon::is_same<long double, decltype(hamon::ellint_2(0   , 0.0l))>::value, "");
static_assert(hamon::is_same<double,      decltype(hamon::ellint_2(0   , 0   ))>::value, "");
static_assert(hamon::is_same<float,       decltype(hamon::ellint_2f(0.0f, 0.0f))>::value, "");
static_assert(hamon::is_same<long double, decltype(hamon::ellint_2l(0.0l, 0.0l))>::value, "");

template <typename T1, typename T2>
void Ellint2TestFloat(double error)
{
	HAMON_CXX11_CONSTEXPR auto nan1 = hamon::numeric_limits<T1>::quiet_NaN();
	HAMON_CXX11_CONSTEXPR auto nan2 = hamon::numeric_limits<T2>::quiet_NaN();
	HAMON_CXX11_CONSTEXPR auto eps1 = hamon::numeric_limits<T1>::epsilon();

	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_2(nan1, nan2)));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_2(nan1, T2(0))));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_2(T1(0), nan2)));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_2(T1( 1) + eps1, T2(0))));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_2(T1(-1) - eps1, T2(0))));

	struct testcase
	{
		double expected;
		T1 k;
		T2 phi;
	};

	static testcase const testcases[] =
	{
		{0.0000000000000000, (T1)-1.0, (T2)0.0000000000000000},
		{0.1736481776669303, (T1)-1.0, (T2)0.17453292519943295},
		{0.3420201433256687, (T1)-1.0, (T2)0.34906585039886590},
		{0.4999999999999999, (T1)-1.0, (T2)0.52359877559829882},
		{0.6427876096865392, (T1)-1.0, (T2)0.69813170079773179},
		{0.7660444431189780, (T1)-1.0, (T2)0.87266462599716477},
		{0.8660254037844385, (T1)-1.0, (T2)1.0471975511965976},
		{0.9396926207859083, (T1)-1.0, (T2)1.2217304763960306},
		{0.9848077530122080, (T1)-1.0, (T2)1.3962634015954636},
		{1.0000000000000000, (T1)-1.0, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)-0.9, (T2)0.0000000000000000},
		{0.1738169060616796, (T1)-0.9, (T2)0.17453292519943295},
		{0.3433791918697205, (T1)-0.9, (T2)0.34906585039886590},
		{0.5046426865985633, (T1)-0.9, (T2)0.52359877559829882},
		{0.6540000384236859, (T1)-0.9, (T2)0.69813170079773179},
		{0.7885492841990463, (T1)-0.9, (T2)0.87266462599716477},
		{0.9064569862631539, (T1)-0.9, (T2)1.0471975511965976},
		{1.0075154899135927, (T1)-0.9, (T2)1.2217304763960306},
		{1.0940135583194071, (T1)-0.9, (T2)1.3962634015954636},
		{1.1716970527816142, (T1)-0.9, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)-0.8, (T2)0.0000000000000000},
		{0.1739676227453480, (T1)-0.8, (T2)0.17453292519943295},
		{0.3445868522696932, (T1)-0.8, (T2)0.34906585039886590},
		{0.5087292365450243, (T1)-0.8, (T2)0.52359877559829882},
		{0.6637201653917622, (T1)-0.8, (T2)0.69813170079773179},
		{0.8076034441016740, (T1)-0.8, (T2)0.87266462599716477},
		{0.9394548037249507, (T1)-0.8, (T2)1.0471975511965976},
		{1.0597473310395040, (T1)-0.8, (T2)1.2217304763960306},
		{1.1706981862452359, (T1)-0.8, (T2)1.3962634015954636},
		{1.2763499431699064, (T1)-0.8, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)-0.7, (T2)0.0000000000000000},
		{0.1741004124270254, (T1)-0.7, (T2)0.17453292519943295},
		{0.3456460508576476, (T1)-0.7, (T2)0.34906585039886590},
		{0.5122849569331465, (T1)-0.7, (T2)0.52359877559829882},
		{0.6720765409879953, (T1)-0.7, (T2)0.69813170079773179},
		{0.8237093263155649, (T1)-0.7, (T2)0.87266462599716477},
		{0.9667231330945280, (T1)-0.7, (T2)1.0471975511965976},
		{1.1017090644949501, (T1)-0.7, (T2)1.2217304763960306},
		{1.2304180097292916, (T1)-0.7, (T2)1.3962634015954636},
		{1.3556611355719554, (T1)-0.7, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)-0.6, (T2)0.0000000000000000},
		{0.1742153491959912, (T1)-0.6, (T2)0.17453292519943295},
		{0.3465592778717409, (T1)-0.6, (T2)0.34906585039886590},
		{0.5153303453843214, (T1)-0.6, (T2)0.52359877559829882},
		{0.6791655059745301, (T1)-0.6, (T2)0.69813170079773179},
		{0.8372021818034988, (T1)-0.6, (T2)0.87266462599716477},
		{0.9892215935493775, (T1)-0.6, (T2)1.0471975511965976},
		{1.1357478470419362, (T1)-0.6, (T2)1.2217304763960306},
		{1.2780617372844061, (T1)-0.6, (T2)1.3962634015954636},
		{1.4180833944487241, (T1)-0.6, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)-0.5, (T2)0.0000000000000000},
		{0.1743124967731590, (T1)-0.5, (T2)0.17453292519943295},
		{0.3473286253777080, (T1)-0.5, (T2)0.34906585039886590},
		{0.5178819348599379, (T1)-0.5, (T2)0.52359877559829882},
		{0.6850602295416454, (T1)-0.5, (T2)0.69813170079773179},
		{0.8483166280334720, (T1)-0.5, (T2)0.87266462599716477},
		{1.0075555551444719, (T1)-0.5, (T2)1.0471975511965976},
		{1.1631768599287302, (T1)-0.5, (T2)1.2217304763960306},
		{1.3160584048772548, (T1)-0.5, (T2)1.3962634015954636},
		{1.4674622093394272, (T1)-0.5, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)-0.4, (T2)0.0000000000000000},
		{0.1743919087248126, (T1)-0.4, (T2)0.17453292519943295},
		{0.3479558176709921, (T1)-0.4, (T2)0.34906585039886590},
		{0.5199529068380446, (T1)-0.4, (T2)0.52359877559829882},
		{0.6898163846443152, (T1)-0.4, (T2)0.69813170079773179},
		{0.8572208885993603, (T1)-0.4, (T2)0.87266462599716477},
		{1.0221301327876993, (T1)-0.4, (T2)1.0471975511965976},
		{1.1848138019818375, (T1)-0.4, (T2)1.2217304763960306},
		{1.3458259266501533, (T1)-0.4, (T2)1.3962634015954636},
		{1.5059416123600404, (T1)-0.4, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)-0.3, (T2)0.0000000000000000},
		{0.1744536286404891, (T1)-0.3, (T2)0.17453292519943295},
		{0.3484422353571347, (T1)-0.3, (T2)0.34906585039886590},
		{0.5215535387741175, (T1)-0.3, (T2)0.52359877559829882},
		{0.6934758441836989, (T1)-0.3, (T2)0.69813170079773179},
		{0.8640360992823765, (T1)-0.3, (T2)0.87266462599716477},
		{1.0332234514065408, (T1)-0.3, (T2)1.0471975511965976},
		{1.2011943182068923, (T1)-0.3, (T2)1.2217304763960306},
		{1.3682566113689625, (T1)-0.3, (T2)1.3962634015954636},
		{1.5348334649232489, (T1)-0.3, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)-0.2, (T2)0.0000000000000000},
		{0.1744976902765280, (T1)-0.2, (T2)0.17453292519943295},
		{0.3487889340076209, (T1)-0.2, (T2)0.34906585039886590},
		{0.5226915285605741, (T1)-0.2, (T2)0.52359877559829882},
		{0.6960691336015757, (T1)-0.2, (T2)0.69813170079773179},
		{0.8688478237486337, (T1)-0.2, (T2)0.87266462599716477},
		{1.0410255369689567, (T1)-0.2, (T2)1.0471975511965976},
		{1.2126730391631364, (T1)-0.2, (T2)1.2217304763960306},
		{1.3839259540325151, (T1)-0.2, (T2)1.3962634015954636},
		{1.5549685462425293, (T1)-0.2, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)-0.1, (T2)0.0000000000000000},
		{0.1745241176664994, (T1)-0.1, (T2)0.17453292519943295},
		{0.3489966580544240, (T1)-0.1, (T2)0.34906585039886590},
		{0.5233722240050878, (T1)-0.1, (T2)0.52359877559829882},
		{0.6976170521728486, (T1)-0.1, (T2)0.69813170079773179},
		{0.8717130927300749, (T1)-0.1, (T2)0.87266462599716477},
		{1.0456602197056326, (T1)-0.1, (T2)1.0471975511965976},
		{1.2194762899272027, (T1)-0.1, (T2)1.2217304763960306},
		{1.3931950229892747, (T1)-0.1, (T2)1.3962634015954636},
		{1.5668619420216683, (T1)-0.1, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)0.0, (T2)0.0000000000000000},
		{0.1745329251994329, (T1)0.0, (T2)0.17453292519943295},
		{0.3490658503988659, (T1)0.0, (T2)0.34906585039886590},
		{0.5235987755982988, (T1)0.0, (T2)0.52359877559829882},
		{0.6981317007977317, (T1)0.0, (T2)0.69813170079773179},
		{0.8726646259971647, (T1)0.0, (T2)0.87266462599716477},
		{1.0471975511965976, (T1)0.0, (T2)1.0471975511965976},
		{1.2217304763960306, (T1)0.0, (T2)1.2217304763960306},
		{1.3962634015954636, (T1)0.0, (T2)1.3962634015954636},
		{1.5707963267948966, (T1)0.0, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)0.1, (T2)0.0000000000000000},
		{0.1745241176664994, (T1)0.1, (T2)0.17453292519943295},
		{0.3489966580544240, (T1)0.1, (T2)0.34906585039886590},
		{0.5233722240050878, (T1)0.1, (T2)0.52359877559829882},
		{0.6976170521728486, (T1)0.1, (T2)0.69813170079773179},
		{0.8717130927300749, (T1)0.1, (T2)0.87266462599716477},
		{1.0456602197056326, (T1)0.1, (T2)1.0471975511965976},
		{1.2194762899272027, (T1)0.1, (T2)1.2217304763960306},
		{1.3931950229892747, (T1)0.1, (T2)1.3962634015954636},
		{1.5668619420216683, (T1)0.1, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)0.2, (T2)0.0000000000000000},
		{0.1744976902765280, (T1)0.2, (T2)0.17453292519943295},
		{0.3487889340076209, (T1)0.2, (T2)0.34906585039886590},
		{0.5226915285605741, (T1)0.2, (T2)0.52359877559829882},
		{0.6960691336015757, (T1)0.2, (T2)0.69813170079773179},
		{0.8688478237486337, (T1)0.2, (T2)0.87266462599716477},
		{1.0410255369689567, (T1)0.2, (T2)1.0471975511965976},
		{1.2126730391631364, (T1)0.2, (T2)1.2217304763960306},
		{1.3839259540325151, (T1)0.2, (T2)1.3962634015954636},
		{1.5549685462425291, (T1)0.2, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)0.3, (T2)0.0000000000000000},
		{0.1744536286404891, (T1)0.3, (T2)0.17453292519943295},
		{0.3484422353571347, (T1)0.3, (T2)0.34906585039886590},
		{0.5215535387741175, (T1)0.3, (T2)0.52359877559829882},
		{0.6934758441836989, (T1)0.3, (T2)0.69813170079773179},
		{0.8640360992823765, (T1)0.3, (T2)0.87266462599716477},
		{1.0332234514065408, (T1)0.3, (T2)1.0471975511965976},
		{1.2011943182068923, (T1)0.3, (T2)1.2217304763960306},
		{1.3682566113689625, (T1)0.3, (T2)1.3962634015954636},
		{1.5348334649232489, (T1)0.3, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)0.4, (T2)0.0000000000000000},
		{0.1743919087248126, (T1)0.4, (T2)0.17453292519943295},
		{0.3479558176709921, (T1)0.4, (T2)0.34906585039886590},
		{0.5199529068380446, (T1)0.4, (T2)0.52359877559829882},
		{0.6898163846443152, (T1)0.4, (T2)0.69813170079773179},
		{0.8572208885993603, (T1)0.4, (T2)0.87266462599716477},
		{1.0221301327876993, (T1)0.4, (T2)1.0471975511965976},
		{1.1848138019818375, (T1)0.4, (T2)1.2217304763960306},
		{1.3458259266501531, (T1)0.4, (T2)1.3962634015954636},
		{1.5059416123600402, (T1)0.4, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)0.5, (T2)0.0000000000000000},
		{0.1743124967731590, (T1)0.5, (T2)0.17453292519943295},
		{0.3473286253777080, (T1)0.5, (T2)0.34906585039886590},
		{0.5178819348599379, (T1)0.5, (T2)0.52359877559829882},
		{0.6850602295416454, (T1)0.5, (T2)0.69813170079773179},
		{0.8483166280334720, (T1)0.5, (T2)0.87266462599716477},
		{1.0075555551444719, (T1)0.5, (T2)1.0471975511965976},
		{1.1631768599287302, (T1)0.5, (T2)1.2217304763960306},
		{1.3160584048772548, (T1)0.5, (T2)1.3962634015954636},
		{1.4674622093394272, (T1)0.5, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)0.6, (T2)0.0000000000000000},
		{0.1742153491959912, (T1)0.6, (T2)0.17453292519943295},
		{0.3465592778717409, (T1)0.6, (T2)0.34906585039886590},
		{0.5153303453843214, (T1)0.6, (T2)0.52359877559829882},
		{0.6791655059745301, (T1)0.6, (T2)0.69813170079773179},
		{0.8372021818034988, (T1)0.6, (T2)0.87266462599716477},
		{0.9892215935493775, (T1)0.6, (T2)1.0471975511965976},
		{1.1357478470419360, (T1)0.6, (T2)1.2217304763960306},
		{1.2780617372844061, (T1)0.6, (T2)1.3962634015954636},
		{1.4180833944487241, (T1)0.6, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)0.7, (T2)0.0000000000000000},
		{0.1741004124270254, (T1)0.7, (T2)0.17453292519943295},
		{0.3456460508576476, (T1)0.7, (T2)0.34906585039886590},
		{0.5122849569331465, (T1)0.7, (T2)0.52359877559829882},
		{0.6720765409879951, (T1)0.7, (T2)0.69813170079773179},
		{0.8237093263155649, (T1)0.7, (T2)0.87266462599716477},
		{0.9667231330945280, (T1)0.7, (T2)1.0471975511965976},
		{1.1017090644949501, (T1)0.7, (T2)1.2217304763960306},
		{1.2304180097292916, (T1)0.7, (T2)1.3962634015954636},
		{1.3556611355719552, (T1)0.7, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)0.8, (T2)0.0000000000000000},
		{0.1739676227453480, (T1)0.8, (T2)0.17453292519943295},
		{0.3445868522696932, (T1)0.8, (T2)0.34906585039886590},
		{0.5087292365450243, (T1)0.8, (T2)0.52359877559829882},
		{0.6637201653917622, (T1)0.8, (T2)0.69813170079773179},
		{0.8076034441016740, (T1)0.8, (T2)0.87266462599716477},
		{0.9394548037249507, (T1)0.8, (T2)1.0471975511965976},
		{1.0597473310395040, (T1)0.8, (T2)1.2217304763960306},
		{1.1706981862452359, (T1)0.8, (T2)1.3962634015954636},
		{1.2763499431699064, (T1)0.8, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)0.9, (T2)0.0000000000000000},
		{0.1738169060616796, (T1)0.9, (T2)0.17453292519943295},
		{0.3433791918697205, (T1)0.9, (T2)0.34906585039886590},
		{0.5046426865985633, (T1)0.9, (T2)0.52359877559829882},
		{0.6540000384236859, (T1)0.9, (T2)0.69813170079773179},
		{0.7885492841990463, (T1)0.9, (T2)0.87266462599716477},
		{0.9064569862631538, (T1)0.9, (T2)1.0471975511965976},
		{1.0075154899135927, (T1)0.9, (T2)1.2217304763960306},
		{1.0940135583194068, (T1)0.9, (T2)1.3962634015954636},
		{1.1716970527816140, (T1)0.9, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)1.0, (T2)0.0000000000000000},
		{0.1736481776669303, (T1)1.0, (T2)0.17453292519943295},
		{0.3420201433256687, (T1)1.0, (T2)0.34906585039886590},
		{0.4999999999999999, (T1)1.0, (T2)0.52359877559829882},
		{0.6427876096865392, (T1)1.0, (T2)0.69813170079773179},
		{0.7660444431189780, (T1)1.0, (T2)0.87266462599716477},
		{0.8660254037844385, (T1)1.0, (T2)1.0471975511965976},
		{0.9396926207859083, (T1)1.0, (T2)1.2217304763960306},
		{0.9848077530122080, (T1)1.0, (T2)1.3962634015954636},
		{1.0000000000000000, (T1)1.0, (T2)1.5707963267948966},
	};

	for (auto const& data : testcases)
	{
		auto const r = hamon::ellint_2(data.k, data.phi);
		double const tole = hamon::abs(data.expected) * error;
		EXPECT_NEAR(data.expected, (double)r, tole);
	}
}

template <typename T>
void Ellint2TestInt()
{
	double const error = 0.000000000001;

	HAMON_CXX11_CONSTEXPR auto nan = hamon::numeric_limits<double>::quiet_NaN();

	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_2(T(0), nan)));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_2(nan, T(0))));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_2(T( 2), T(0))));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_2(T(-2), T(0))));

	struct testcase
	{
		double expected;
		T      k;
		double phi;
	};

	static testcase const testcases[] =
	{
		{0.0000000000000000, 0, 0.0000000000000000},
		{0.1745329251994329, 0, 0.17453292519943295},
		{0.3490658503988659, 0, 0.34906585039886590},
		{0.5235987755982988, 0, 0.52359877559829882},
		{0.6981317007977317, 0, 0.69813170079773179},
		{0.8726646259971647, 0, 0.87266462599716477},
		{1.0471975511965976, 0, 1.0471975511965976},
		{1.2217304763960306, 0, 1.2217304763960306},
		{1.3962634015954636, 0, 1.3962634015954636},
		{1.5707963267948966, 0, 1.5707963267948966},
	};

	for (auto const& data : testcases)
	{
		auto const r = hamon::ellint_2(data.k, data.phi);
		double const tole = hamon::abs(data.expected) * error;
		EXPECT_NEAR(data.expected, (double)r, tole);
	}
}

GTEST_TEST(CMathTest, Ellint2Test)
{
	Ellint2TestFloat<float,       float>      (0.0001);
	Ellint2TestFloat<float,       double>     (0.000001);
	Ellint2TestFloat<float,       long double>(0.000001);
	Ellint2TestFloat<double,      float>      (0.000001);
	Ellint2TestFloat<double,      double>     (0.000000000001);
	Ellint2TestFloat<double,      long double>(0.000000000001);
	Ellint2TestFloat<long double, float>      (0.000001);
	Ellint2TestFloat<long double, double>     (0.000000000001);
	Ellint2TestFloat<long double, long double>(0.000000000001);

	Ellint2TestInt<int>();
	Ellint2TestInt<short>();

	HAMON_CXX11_CONSTEXPR auto nanf = hamon::numeric_limits<float>::quiet_NaN();
	HAMON_CXX11_CONSTEXPR auto epsf = hamon::numeric_limits<float>::epsilon();
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_2f(nanf, nanf)));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_2f(nanf, 0.0f)));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_2f(0.0f, nanf)));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_2f( 1.0f + epsf, 0.0f)));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_2f(-1.0f - epsf, 0.0f)));

	HAMON_CXX11_CONSTEXPR auto nanl = hamon::numeric_limits<long double>::quiet_NaN();
	HAMON_CXX11_CONSTEXPR auto epsl = hamon::numeric_limits<long double>::epsilon();
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_2l(nanl, nanl)));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_2l(nanl, 0.0l)));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_2l(0.0l, nanl)));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_2l( 1.0l + epsl, 0.0l)));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_2l(-1.0l - epsl, 0.0l)));
}

}	// namespace ellint_2_test

}	// namespace hamon_cmath_test
