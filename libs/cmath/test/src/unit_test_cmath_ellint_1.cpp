/**
 *	@file	unit_test_cmath_ellint_1.cpp
 *
 *	@brief	ellint_1 のテスト
 */

#include <hamon/cmath/ellint_1.hpp>
#include <hamon/cmath/isnan.hpp>
//#include <hamon/cmath/isinf.hpp>
#include <hamon/cmath/abs.hpp>
#include <hamon/type_traits/is_same.hpp>
#include <hamon/limits.hpp>
#include <hamon/numbers.hpp>
#include <gtest/gtest.h>
#include "constexpr_test.hpp"

namespace hamon_cmath_test
{

namespace ellint_1_test
{

static_assert(hamon::is_same<float,       decltype(hamon::ellint_1(0.0f, 0.0f))>::value, "");
static_assert(hamon::is_same<double,      decltype(hamon::ellint_1(0.0f, 0.0 ))>::value, "");
static_assert(hamon::is_same<long double, decltype(hamon::ellint_1(0.0f, 0.0l))>::value, "");
static_assert(hamon::is_same<double,      decltype(hamon::ellint_1(0.0f, 0   ))>::value, "");
static_assert(hamon::is_same<double,      decltype(hamon::ellint_1(0.0 , 0.0f))>::value, "");
static_assert(hamon::is_same<double,      decltype(hamon::ellint_1(0.0 , 0.0 ))>::value, "");
static_assert(hamon::is_same<long double, decltype(hamon::ellint_1(0.0 , 0.0l))>::value, "");
static_assert(hamon::is_same<double,      decltype(hamon::ellint_1(0.0 , 0   ))>::value, "");
static_assert(hamon::is_same<long double, decltype(hamon::ellint_1(0.0l, 0.0f))>::value, "");
static_assert(hamon::is_same<long double, decltype(hamon::ellint_1(0.0l, 0.0 ))>::value, "");
static_assert(hamon::is_same<long double, decltype(hamon::ellint_1(0.0l, 0.0l))>::value, "");
static_assert(hamon::is_same<long double, decltype(hamon::ellint_1(0.0l, 0   ))>::value, "");
static_assert(hamon::is_same<double,      decltype(hamon::ellint_1(0   , 0.0f))>::value, "");
static_assert(hamon::is_same<double,      decltype(hamon::ellint_1(0   , 0.0 ))>::value, "");
static_assert(hamon::is_same<long double, decltype(hamon::ellint_1(0   , 0.0l))>::value, "");
static_assert(hamon::is_same<double,      decltype(hamon::ellint_1(0   , 0   ))>::value, "");
static_assert(hamon::is_same<float,       decltype(hamon::ellint_1f(0.0f, 0.0f))>::value, "");
static_assert(hamon::is_same<long double, decltype(hamon::ellint_1l(0.0l, 0.0l))>::value, "");

template <typename T1, typename T2>
void Ellint1TestFloat(double error)
{
	using Promoted = hamon::float_promote_t<T1, T2>;
	HAMON_CXX11_CONSTEXPR auto nan1 = hamon::numeric_limits<T1>::quiet_NaN();
	HAMON_CXX11_CONSTEXPR auto nan2 = hamon::numeric_limits<T2>::quiet_NaN();
	HAMON_CXX11_CONSTEXPR auto eps1 = hamon::numeric_limits<T1>::epsilon();
	HAMON_CXX11_CONSTEXPR auto eps2 = hamon::numeric_limits<T2>::epsilon();
	HAMON_CXX11_CONSTEXPR auto inf  = hamon::numeric_limits<Promoted>::infinity();
	HAMON_CXX11_CONSTEXPR auto pi = hamon::numbers::pi_fn<T2>();

	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_1(nan1, nan2)));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_1(nan1, T2(0))));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_1(T1(0), nan2)));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_1(T1( 1) + eps1, T2(0))));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_1(T1(-1) - eps1, T2(0))));

	HAMON_CXX14_CONSTEXPR_EXPECT_EQ(inf, hamon::ellint_1(T1( 1), -pi/2 - eps2));
	HAMON_CXX14_CONSTEXPR_EXPECT_EQ(inf, hamon::ellint_1(T1( 1),  pi/2 + eps2));
	HAMON_CXX14_CONSTEXPR_EXPECT_EQ(inf, hamon::ellint_1(T1(-1), -pi/2 - eps2));
	HAMON_CXX14_CONSTEXPR_EXPECT_EQ(inf, hamon::ellint_1(T1(-1),  pi/2 + eps2));

	struct testcase
	{
		double expected;
		T1 k;
		T2 phi;
	};

	static testcase const testcases[] =
	{
		{0.0000000000000000, (T1)-1.0, (T2)0.0000000000000000},
		{0.1754258296518182, (T1)-1.0, (T2)0.17453292519943295},
		{0.3563785047244499, (T1)-1.0, (T2)0.34906585039886590},
		{0.5493061443340547, (T1)-1.0, (T2)0.52359877559829882},
		{0.7629096520666106, (T1)-1.0, (T2)0.69813170079773179},
		{1.0106831886830212, (T1)-1.0, (T2)0.87266462599716477},
		{1.3169578969248164, (T1)-1.0, (T2)1.0471975511965976},
		{1.7354151626688941, (T1)-1.0, (T2)1.2217304763960306},
		{2.4362460537158770, (T1)-1.0, (T2)1.3962634015954636},
//		{39.1831385665,      (T1)-1.0, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)-0.9, (T2)0.0000000000000000},
		{0.1752542737611502, (T1)-0.9, (T2)0.17453292519943295},
		{0.3549246459129744, (T1)-0.9, (T2)0.34906585039886590},
		{0.5438822141615712, (T1)-0.9, (T2)0.52359877559829882},
		{0.7479740042353251, (T1)-0.9, (T2)0.69813170079773179},
		{0.9746389845196644, (T1)-0.9, (T2)0.87266462599716477},
		{1.2334463254523438, (T1)-0.9, (T2)1.0471975511965976},
		{1.5355247765594913, (T1)-0.9, (T2)1.2217304763960306},
		{1.8882928567775126, (T1)-0.9, (T2)1.3962634015954636},
		{2.2805491384227703, (T1)-0.9, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)-0.8, (T2)0.0000000000000000},
		{0.1751015424133889, (T1)-0.8, (T2)0.17453292519943295},
		{0.3536506883977939, (T1)-0.8, (T2)0.34906585039886590},
		{0.5392680440908455, (T1)-0.8, (T2)0.52359877559829882},
		{0.7358792602807037, (T1)-0.8, (T2)0.69813170079773179},
		{0.9477094297007117, (T1)-0.8, (T2)0.87266462599716477},
		{1.1789022995388236, (T1)-0.8, (T2)1.0471975511965976},
		{1.4323027881876012, (T1)-0.8, (T2)1.2217304763960306},
		{1.7069629739121677, (T1)-0.8, (T2)1.3962634015954636},
		{1.9953027776647294, (T1)-0.8, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)-0.7, (T2)0.0000000000000000},
		{0.1749673746691672, (T1)-0.7, (T2)0.17453292519943295},
		{0.3525468753567793, (T1)-0.7, (T2)0.34906585039886590},
		{0.5353674027599713, (T1)-0.7, (T2)0.52359877559829882},
		{0.7260379765168445, (T1)-0.7, (T2)0.69813170079773179},
		{0.9269829634831344, (T1)-0.7, (T2)0.87266462599716477},
		{1.1400447527693316, (T1)-0.7, (T2)1.0471975511965976},
		{1.3657668117194071, (T1)-0.7, (T2)1.2217304763960306},
		{1.6024686895959162, (T1)-0.7, (T2)1.3962634015954636},
		{1.8456939983747234, (T1)-0.7, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)-0.6, (T2)0.0000000000000000},
		{0.1748515436298835, (T1)-0.6, (T2)0.17453292519943295},
		{0.3516050986554432, (T1)-0.6, (T2)0.34906585039886590},
		{0.5321065257844613, (T1)-0.6, (T2)0.52359877559829882},
		{0.7180530466448565, (T1)-0.6, (T2)0.69813170079773179},
		{0.9108275903019598, (T1)-0.6, (T2)0.87266462599716477},
		{1.1112333229323361, (T1)-0.6, (T2)1.0471975511965976},
		{1.3191461190365270, (T1)-0.6, (T2)1.2217304763960306},
		{1.5332022105084779, (T1)-0.6, (T2)1.3962634015954636},
		{1.7507538029157523, (T1)-0.6, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)-0.5, (T2)0.0000000000000000},
		{0.1747538551403578, (T1)-0.5, (T2)0.17453292519943295},
		{0.3508186847010157, (T1)-0.5, (T2)0.34906585039886590},
		{0.5294286270519057, (T1)-0.5, (T2)0.52359877559829882},
		{0.7116472756263032, (T1)-0.5, (T2)0.69813170079773179},
		{0.8982452359422776, (T1)-0.5, (T2)0.87266462599716477},
		{1.0895506700518853, (T1)-0.5, (T2)1.0471975511965976},
		{1.2853005857432933, (T1)-0.5, (T2)1.2217304763960306},
		{1.4845545520549488, (T1)-0.5, (T2)1.3962634015954636},
		{1.6857503548125961, (T1)-0.5, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)-0.4, (T2)0.0000000000000000},
		{0.1746741466944152, (T1)-0.4, (T2)0.17453292519943295},
		{0.3501822277248344, (T1)-0.4, (T2)0.34906585039886590},
		{0.5272901591750874, (T1)-0.4, (T2)0.52359877559829882},
		{0.7066237440734124, (T1)-0.4, (T2)0.69813170079773179},
		{0.8885921049760215, (T1)-0.4, (T2)0.87266462599716477},
		{1.0733136290471381, (T1)-0.4, (T2)1.0471975511965976},
		{1.2605612170157066, (T1)-0.4, (T2)1.2217304763960306},
		{1.4497513956433439, (T1)-0.4, (T2)1.3962634015954636},
		{1.6399998658645112, (T1)-0.4, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)-0.3, (T2)0.0000000000000000},
		{0.1746122865300009, (T1)-0.3, (T2)0.17453292519943295},
		{0.3496914610279842, (T1)-0.3, (T2)0.34906585039886590},
		{0.5256582287372630, (T1)-0.3, (T2)0.52359877559829882},
		{0.7028422651240854, (T1)-0.3, (T2)0.69813170079773179},
		{0.8814413919511117, (T1)-0.3, (T2)0.87266462599716477},
		{1.0614897067260520, (T1)-0.3, (T2)1.0471975511965976},
		{1.2428416824174220, (T1)-0.3, (T2)1.2217304763960306},
		{1.4251795877015929, (T1)-0.3, (T2)1.3962634015954636},
		{1.6080486199305126, (T1)-0.3, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)-0.2, (T2)0.0000000000000000},
		{0.1745681729029280, (T1)-0.2, (T2)0.17453292519943295},
		{0.3493431593208679, (T1)-0.2, (T2)0.34906585039886590},
		{0.5245088052944398, (T1)-0.2, (T2)0.52359877559829882},
		{0.7002049100984488, (T1)-0.2, (T2)0.69813170079773179},
		{0.8765100664996797, (T1)-0.2, (T2)0.87266462599716477},
		{1.0534305870298994, (T1)-0.2, (T2)1.0471975511965976},
		{1.2308975521670789, (T1)-0.2, (T2)1.2217304763960306},
		{1.4087733584990738, (T1)-0.2, (T2)1.3962634015954636},
		{1.5868678474541662, (T1)-0.2, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)-0.1, (T2)0.0000000000000000},
		{0.1745417335306366, (T1)-0.1, (T2)0.17453292519943295},
		{0.3491350672146809, (T1)-0.1, (T2)0.34906585039886590},
		{0.5238255001653895, (T1)-0.1, (T2)0.52359877559829882},
		{0.6986470085417702, (T1)-0.1, (T2)0.69813170079773179},
		{0.8736179258696485, (T1)-0.1, (T2)0.87266462599716477},
		{1.0487386319621685, (T1)-0.1, (T2)1.0471975511965976},
		{1.2239913752078759, (T1)-0.1, (T2)1.2217304763960306},
		{1.3993423113684051, (T1)-0.1, (T2)1.3962634015954636},
		{1.5747455615173558, (T1)-0.1, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)0.0, (T2)0.0000000000000000},
		{0.1745329251994329, (T1)0.0, (T2)0.17453292519943295},
		{0.3490658503988659, (T1)0.0, (T2)0.34906585039886590},
		{0.5235987755982988, (T1)0.0, (T2)0.52359877559829882},
		{0.6981317007977317, (T1)0.0, (T2)0.69813170079773179},
		{0.8726646259971647, (T1)0.0, (T2)0.87266462599716477},
		{1.0471975511965976, (T1)0.0, (T2)1.0471975511965976},
		{1.2217304763960306, (T1)0.0, (T2)1.2217304763960306},
		{1.3962634015954636, (T1)0.0, (T2)1.3962634015954636},
		{1.5707963267948966, (T1)0.0, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)0.1, (T2)0.0000000000000000},
		{0.1745417335306366, (T1)0.1, (T2)0.17453292519943295},
		{0.3491350672146809, (T1)0.1, (T2)0.34906585039886590},
		{0.5238255001653895, (T1)0.1, (T2)0.52359877559829882},
		{0.6986470085417702, (T1)0.1, (T2)0.69813170079773179},
		{0.8736179258696485, (T1)0.1, (T2)0.87266462599716477},
		{1.0487386319621685, (T1)0.1, (T2)1.0471975511965976},
		{1.2239913752078759, (T1)0.1, (T2)1.2217304763960306},
		{1.3993423113684051, (T1)0.1, (T2)1.3962634015954636},
		{1.5747455615173560, (T1)0.1, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)0.2, (T2)0.0000000000000000},
		{0.1745681729029280, (T1)0.2, (T2)0.17453292519943295},
		{0.3493431593208679, (T1)0.2, (T2)0.34906585039886590},
		{0.5245088052944398, (T1)0.2, (T2)0.52359877559829882},
		{0.7002049100984488, (T1)0.2, (T2)0.69813170079773179},
		{0.8765100664996797, (T1)0.2, (T2)0.87266462599716477},
		{1.0534305870298994, (T1)0.2, (T2)1.0471975511965976},
		{1.2308975521670789, (T1)0.2, (T2)1.2217304763960306},
		{1.4087733584990738, (T1)0.2, (T2)1.3962634015954636},
		{1.5868678474541662, (T1)0.2, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)0.3, (T2)0.0000000000000000},
		{0.1746122865300009, (T1)0.3, (T2)0.17453292519943295},
		{0.3496914610279842, (T1)0.3, (T2)0.34906585039886590},
		{0.5256582287372630, (T1)0.3, (T2)0.52359877559829882},
		{0.7028422651240854, (T1)0.3, (T2)0.69813170079773179},
		{0.8814413919511117, (T1)0.3, (T2)0.87266462599716477},
		{1.0614897067260520, (T1)0.3, (T2)1.0471975511965976},
		{1.2428416824174220, (T1)0.3, (T2)1.2217304763960306},
		{1.4251795877015929, (T1)0.3, (T2)1.3962634015954636},
		{1.6080486199305128, (T1)0.3, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)0.4, (T2)0.0000000000000000},
		{0.1746741466944152, (T1)0.4, (T2)0.17453292519943295},
		{0.3501822277248344, (T1)0.4, (T2)0.34906585039886590},
		{0.5272901591750874, (T1)0.4, (T2)0.52359877559829882},
		{0.7066237440734124, (T1)0.4, (T2)0.69813170079773179},
		{0.8885921049760215, (T1)0.4, (T2)0.87266462599716477},
		{1.0733136290471381, (T1)0.4, (T2)1.0471975511965976},
		{1.2605612170157066, (T1)0.4, (T2)1.2217304763960306},
		{1.4497513956433439, (T1)0.4, (T2)1.3962634015954636},
		{1.6399998658645112, (T1)0.4, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)0.5, (T2)0.0000000000000000},
		{0.1747538551403578, (T1)0.5, (T2)0.17453292519943295},
		{0.3508186847010157, (T1)0.5, (T2)0.34906585039886590},
		{0.5294286270519057, (T1)0.5, (T2)0.52359877559829882},
		{0.7116472756263032, (T1)0.5, (T2)0.69813170079773179},
		{0.8982452359422776, (T1)0.5, (T2)0.87266462599716477},
		{1.0895506700518853, (T1)0.5, (T2)1.0471975511965976},
		{1.2853005857432933, (T1)0.5, (T2)1.2217304763960306},
		{1.4845545520549488, (T1)0.5, (T2)1.3962634015954636},
		{1.6857503548125961, (T1)0.5, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)0.6, (T2)0.0000000000000000},
		{0.1748515436298835, (T1)0.6, (T2)0.17453292519943295},
		{0.3516050986554432, (T1)0.6, (T2)0.34906585039886590},
		{0.5321065257844613, (T1)0.6, (T2)0.52359877559829882},
		{0.7180530466448565, (T1)0.6, (T2)0.69813170079773179},
		{0.9108275903019598, (T1)0.6, (T2)0.87266462599716477},
		{1.1112333229323361, (T1)0.6, (T2)1.0471975511965976},
		{1.3191461190365270, (T1)0.6, (T2)1.2217304763960306},
		{1.5332022105084779, (T1)0.6, (T2)1.3962634015954636},
		{1.7507538029157526, (T1)0.6, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)0.7, (T2)0.0000000000000000},
		{0.1749673746691672, (T1)0.7, (T2)0.17453292519943295},
		{0.3525468753567793, (T1)0.7, (T2)0.34906585039886590},
		{0.5353674027599713, (T1)0.7, (T2)0.52359877559829882},
		{0.7260379765168445, (T1)0.7, (T2)0.69813170079773179},
		{0.9269829634831344, (T1)0.7, (T2)0.87266462599716477},
		{1.1400447527693318, (T1)0.7, (T2)1.0471975511965976},
		{1.3657668117194073, (T1)0.7, (T2)1.2217304763960306},
		{1.6024686895959164, (T1)0.7, (T2)1.3962634015954636},
		{1.8456939983747236, (T1)0.7, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)0.8, (T2)0.0000000000000000},
		{0.1751015424133889, (T1)0.8, (T2)0.17453292519943295},
		{0.3536506883977939, (T1)0.8, (T2)0.34906585039886590},
		{0.5392680440908455, (T1)0.8, (T2)0.52359877559829882},
		{0.7358792602807037, (T1)0.8, (T2)0.69813170079773179},
		{0.9477094297007117, (T1)0.8, (T2)0.87266462599716477},
		{1.1789022995388236, (T1)0.8, (T2)1.0471975511965976},
		{1.4323027881876012, (T1)0.8, (T2)1.2217304763960306},
		{1.7069629739121677, (T1)0.8, (T2)1.3962634015954636},
		{1.9953027776647294, (T1)0.8, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)0.9, (T2)0.0000000000000000},
		{0.1752542737611502, (T1)0.9, (T2)0.17453292519943295},
		{0.3549246459129744, (T1)0.9, (T2)0.34906585039886590},
		{0.5438822141615712, (T1)0.9, (T2)0.52359877559829882},
		{0.7479740042353251, (T1)0.9, (T2)0.69813170079773179},
		{0.9746389845196644, (T1)0.9, (T2)0.87266462599716477},
		{1.2334463254523440, (T1)0.9, (T2)1.0471975511965976},
		{1.5355247765594915, (T1)0.9, (T2)1.2217304763960306},
		{1.8882928567775128, (T1)0.9, (T2)1.3962634015954636},
		{2.2805491384227707, (T1)0.9, (T2)1.5707963267948966},

		{0.0000000000000000, (T1)1.0, (T2)0.0000000000000000},
		{0.1754258296518182, (T1)1.0, (T2)0.17453292519943295},
		{0.3563785047244499, (T1)1.0, (T2)0.34906585039886590},
		{0.5493061443340547, (T1)1.0, (T2)0.52359877559829882},
		{0.7629096520666106, (T1)1.0, (T2)0.69813170079773179},
		{1.0106831886830212, (T1)1.0, (T2)0.87266462599716477},
		{1.3169578969248164, (T1)1.0, (T2)1.0471975511965976},
		{1.7354151626688941, (T1)1.0, (T2)1.2217304763960306},
		{2.4362460537158770, (T1)1.0, (T2)1.3962634015954636},
//		{39.1831385665,      (T1)1.0, (T2)1.5707963267948966},
	};

	for (auto const& data : testcases)
	{
		auto const r = hamon::ellint_1(data.k, data.phi);
		double const tole = hamon::abs(data.expected) * error;
		EXPECT_NEAR(data.expected, (double)r, tole);
	}
}

template <typename T>
void Ellint1TestInt()
{
	double const error = 0.000000000001;

	HAMON_CXX11_CONSTEXPR auto nan = hamon::numeric_limits<double>::quiet_NaN();
	HAMON_CXX11_CONSTEXPR auto inf = hamon::numeric_limits<double>::infinity();
	HAMON_CXX11_CONSTEXPR auto pi = hamon::numbers::pi_fn<double>();

	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_1(T(0), nan)));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_1(nan, T(0))));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_1(T( 2), T(0))));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_1(T(-2), T(0))));

	HAMON_CXX14_CONSTEXPR_EXPECT_EQ(inf, hamon::ellint_1(T( 1), -pi/2));
	HAMON_CXX14_CONSTEXPR_EXPECT_EQ(inf, hamon::ellint_1(T( 1),  pi/2));
	HAMON_CXX14_CONSTEXPR_EXPECT_EQ(inf, hamon::ellint_1(T(-1), -pi/2));
	HAMON_CXX14_CONSTEXPR_EXPECT_EQ(inf, hamon::ellint_1(T(-1),  pi/2));

	struct testcase
	{
		double expected;
		T      k;
		double phi;
	};

	static testcase const testcases[] =
	{
		{0.0000000000000000, 0, 0.0000000000000000},
		{0.1745329251994329, 0, 0.17453292519943295},
		{0.3490658503988659, 0, 0.34906585039886590},
		{0.5235987755982988, 0, 0.52359877559829882},
		{0.6981317007977317, 0, 0.69813170079773179},
		{0.8726646259971647, 0, 0.87266462599716477},
		{1.0471975511965976, 0, 1.0471975511965976},
		{1.2217304763960306, 0, 1.2217304763960306},
		{1.3962634015954636, 0, 1.3962634015954636},
		{1.5707963267948966, 0, 1.5707963267948966},
	};

	for (auto const& data : testcases)
	{
		auto const r = hamon::ellint_1(data.k, data.phi);
		double const tole = hamon::abs(data.expected) * error;
		EXPECT_NEAR(data.expected, (double)r, tole);
	}
}

GTEST_TEST(CMathTest, Ellint1Test)
{
	Ellint1TestFloat<float,       float>      (0.000001);
	Ellint1TestFloat<float,       double>     (0.000001);
	Ellint1TestFloat<float,       long double>(0.000001);
	Ellint1TestFloat<double,      float>      (0.000001);
	Ellint1TestFloat<double,      double>     (0.000000000001);
	Ellint1TestFloat<double,      long double>(0.000000000001);
	Ellint1TestFloat<long double, float>      (0.000001);
	Ellint1TestFloat<long double, double>     (0.000000000001);
	Ellint1TestFloat<long double, long double>(0.000000000001);

	Ellint1TestInt<int>();
	Ellint1TestInt<short>();

	HAMON_CXX11_CONSTEXPR auto nanf = hamon::numeric_limits<float>::quiet_NaN();
	HAMON_CXX11_CONSTEXPR auto epsf = hamon::numeric_limits<float>::epsilon();
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_1f(nanf, nanf)));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_1f(nanf, 0.0f)));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_1f(0.0f, nanf)));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_1f( 1.0f + epsf, 0.0f)));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_1f(-1.0f - epsf, 0.0f)));

	HAMON_CXX11_CONSTEXPR auto nanl = hamon::numeric_limits<long double>::quiet_NaN();
	HAMON_CXX11_CONSTEXPR auto epsl = hamon::numeric_limits<long double>::epsilon();
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_1l(nanl, nanl)));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_1l(nanl, 0.0l)));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_1l(0.0l, nanl)));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_1l( 1.0l + epsl, 0.0l)));
	HAMON_CXX14_CONSTEXPR_EXPECT_TRUE(hamon::isnan(hamon::ellint_1l(-1.0l - epsl, 0.0l)));
}

}	// namespace ellint_1_test

}	// namespace hamon_cmath_test
