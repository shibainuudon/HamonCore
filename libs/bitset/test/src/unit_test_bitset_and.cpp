/**
 *	@file	unit_test_bitset_and.cpp
 *
 *	@brief	operator& のテスト
 *
 *	template<size_t N>
 *	constexpr bitset<N> operator&(const bitset<N>& lhs, const bitset<N>& rhs) noexcept;
 */

#include <hamon/bitset.hpp>
#include <gtest/gtest.h>
#include "constexpr_test.hpp"

GTEST_TEST(BitsetTest, AndTest)
{
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<0>() &
			hamon::bitset<0>();
		EXPECT_EQ("", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00u, b.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<1>("0") &
			hamon::bitset<1>("0");
		EXPECT_EQ("0", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00u, b.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<1>("1") &
			hamon::bitset<1>("0");
		EXPECT_EQ("0", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00u, b.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<1>("0") &
			hamon::bitset<1>("1");
		EXPECT_EQ("0", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00u, b.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<1>("1") &
			hamon::bitset<1>("1");
		EXPECT_EQ("1", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x01u, b.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<7>("1111111") &
			hamon::bitset<7>("0000001");
		EXPECT_EQ("0000001", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x01u, b.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<7>("1111111") &
			hamon::bitset<7>("1000000");
		EXPECT_EQ("1000000", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x40u, b.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<8>("01010101") &
			hamon::bitset<8>("00001111");
		EXPECT_EQ("00000101", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x05u, b.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(2u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<8>("11111111") &
			hamon::bitset<8>("00000000");
		EXPECT_EQ("00000000", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00u, b.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<8>("11111111") &
			hamon::bitset<8>("00000001");
		EXPECT_EQ("00000001", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x01u, b.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<8>("11111111") &
			hamon::bitset<8>("10000000");
		EXPECT_EQ("10000000", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x80u, b.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<9>("111111111") &
			hamon::bitset<9>("000000001");
		EXPECT_EQ("000000001", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x01u, b.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<9>("111111111") &
			hamon::bitset<9>("100000000");
		EXPECT_EQ("100000000", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x100u, b.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<15>("100000000000001") &
			hamon::bitset<15>("111111111111111");
		EXPECT_EQ("100000000000001", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x4001u, b.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(2u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<16>("0101010101010101") &
			hamon::bitset<16>("0000111100001111");
		EXPECT_EQ("0000010100000101", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0505u, b.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(4u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<16>("0000000000000001") &
			hamon::bitset<16>("1111111111111111");
		EXPECT_EQ("0000000000000001", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0001u, b.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<16>("1000000000000000") &
			hamon::bitset<16>("1111111111111111");
		EXPECT_EQ("1000000000000000", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x8000u, b.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<17>("10000000000000001") &
			hamon::bitset<17>("11111111111111111");
		EXPECT_EQ("10000000000000001", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x10001u, b.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(2u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<31>("1111111111111111111111111111111") &
			hamon::bitset<31>("1000000000000000000000000000001");
		EXPECT_EQ("1000000000000000000000000000001", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x40000001u, b.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(2u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<32>("01010101010101010101010101010101") &
			hamon::bitset<32>("00001111000011110000111100001111");
		EXPECT_EQ("00000101000001010000010100000101", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x05050505u, b.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(8u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<32>("11111111111111111111111111111111") &
			hamon::bitset<32>("10000000000000000000000000000001");
		EXPECT_EQ("10000000000000000000000000000001", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x80000001u, b.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(2u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<33>("111111111111111111111111111111111") &
			hamon::bitset<33>("100000000000000000000000000000001");
		EXPECT_EQ("100000000000000000000000000000001", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x100000001u, b.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(2u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<64>("0101010101010101010101010101010101010101010101010101010101010101") &
			hamon::bitset<64>("0000111100001111000011110000111100001111000011110000111100001111");
		EXPECT_EQ("0000010100000101000001010000010100000101000001010000010100000101", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0505050505050505u, b.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(16u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<64>("1111111111111111111111111111111111111111111111111111111111111111") &
			hamon::bitset<64>("1000000000000000000000000000000000000000000000000000000000000001");
		EXPECT_EQ("1000000000000000000000000000000000000000000000000000000000000001", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x8000000000000001u, b.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(2u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<127>("1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111") &
			hamon::bitset<127>("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001");
		EXPECT_EQ("0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<127>("1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111") &
			hamon::bitset<127>("1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
		EXPECT_EQ("1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<128>("01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101") &
			hamon::bitset<128>("00001111000011110000111100001111000011110000111100001111000011110000111100001111000011110000111100001111000011110000111100001111");
		EXPECT_EQ("00000101000001010000010100000101000001010000010100000101000001010000010100000101000001010000010100000101000001010000010100000101", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(32u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<128>("11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111") &
			hamon::bitset<128>("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001");
		EXPECT_EQ("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<128>("11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111") &
			hamon::bitset<128>("10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
		EXPECT_EQ("10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<129>("111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111") &
			hamon::bitset<129>("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001");
		EXPECT_EQ("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto const b =
			hamon::bitset<129>("111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111") &
			hamon::bitset<129>("100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
		EXPECT_EQ("100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b.count());
	}
}
