/**
 *	@file	unit_test_bitset_shift_right.cpp
 *
 *	@brief	operator>> のテスト
 *
 *	constexpr bitset operator>>(size_t pos) const noexcept;
 */

#include <hamon/bitset.hpp>
#include <gtest/gtest.h>
#include "constexpr_test.hpp"

GTEST_TEST(BitsetTest, ShiftRightTest)
{
	{
		HAMON_CXX11_CONSTEXPR auto b1 = (hamon::bitset<0>() >> 0);
		HAMON_CXX11_CONSTEXPR auto b2 = (hamon::bitset<0>() >> 1);
		HAMON_CXX11_CONSTEXPR auto b3 = (hamon::bitset<0>() >> 2);
		EXPECT_EQ("", b1.to_string());
		EXPECT_EQ("", b2.to_string());
		EXPECT_EQ("", b3.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00u, b1.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00u, b2.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00u, b3.to_ulong());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b1 = (~hamon::bitset<1>() >> 0);
		HAMON_CXX11_CONSTEXPR auto b2 = (~hamon::bitset<1>() >> 1);

		EXPECT_EQ("1", b1.to_string());
		EXPECT_EQ("0", b2.to_string());

		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b1.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b2.to_ulong());

		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b1.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b2.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b1 = (~hamon::bitset<7>{} >> 0);
		HAMON_CXX11_CONSTEXPR auto b2 = (~hamon::bitset<7>{} >> 1);
		HAMON_CXX11_CONSTEXPR auto b3 = (~hamon::bitset<7>{} >> 2);
		HAMON_CXX11_CONSTEXPR auto b4 = (~hamon::bitset<7>{} >> 3);
		HAMON_CXX11_CONSTEXPR auto b5 = (~hamon::bitset<7>{} >> 4);
		HAMON_CXX11_CONSTEXPR auto b6 = (~hamon::bitset<7>{} >> 5);
		HAMON_CXX11_CONSTEXPR auto b7 = (~hamon::bitset<7>{} >> 6);
		HAMON_CXX11_CONSTEXPR auto b8 = (~hamon::bitset<7>{} >> 7);
		HAMON_CXX11_CONSTEXPR auto b9 = (~hamon::bitset<7>{} >> 8);

		EXPECT_EQ("1111111", b1.to_string());
		EXPECT_EQ("0111111", b2.to_string());
		EXPECT_EQ("0011111", b3.to_string());
		EXPECT_EQ("0001111", b4.to_string());
		EXPECT_EQ("0000111", b5.to_string());
		EXPECT_EQ("0000011", b6.to_string());
		EXPECT_EQ("0000001", b7.to_string());
		EXPECT_EQ("0000000", b8.to_string());
		EXPECT_EQ("0000000", b9.to_string());

		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x7Fu, b1.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x3Fu, b2.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x1Fu, b3.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0Fu, b4.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x07u, b5.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x03u, b6.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x01u, b7.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00u, b8.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00u, b9.to_ulong());

		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(7u, b1.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(6u, b2.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(5u, b3.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(4u, b4.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(3u, b5.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(2u, b6.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b7.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b8.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b9.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b1  = (hamon::bitset<8>("01001011") >> 0);
		HAMON_CXX11_CONSTEXPR auto b2  = (hamon::bitset<8>("01001011") >> 1);
		HAMON_CXX11_CONSTEXPR auto b3  = (hamon::bitset<8>("01001011") >> 2);
		HAMON_CXX11_CONSTEXPR auto b4  = (hamon::bitset<8>("01001011") >> 3);
		HAMON_CXX11_CONSTEXPR auto b5  = (hamon::bitset<8>("01001011") >> 4);
		HAMON_CXX11_CONSTEXPR auto b6  = (hamon::bitset<8>("01001011") >> 5);
		HAMON_CXX11_CONSTEXPR auto b7  = (hamon::bitset<8>("01001011") >> 6);
		HAMON_CXX11_CONSTEXPR auto b8  = (hamon::bitset<8>("01001011") >> 7);
		HAMON_CXX11_CONSTEXPR auto b9  = (hamon::bitset<8>("01001011") >> 8);
		HAMON_CXX11_CONSTEXPR auto b10 = (hamon::bitset<8>("01001011") >> 9);
		HAMON_CXX11_CONSTEXPR auto b11 = (hamon::bitset<8>("01001011") >> 10);

		EXPECT_EQ("01001011", b1.to_string());
		EXPECT_EQ("00100101", b2.to_string());
		EXPECT_EQ("00010010", b3.to_string());
		EXPECT_EQ("00001001", b4.to_string());
		EXPECT_EQ("00000100", b5.to_string());
		EXPECT_EQ("00000010", b6.to_string());
		EXPECT_EQ("00000001", b7.to_string());
		EXPECT_EQ("00000000", b8.to_string());
		EXPECT_EQ("00000000", b9.to_string());
		EXPECT_EQ("00000000", b10.to_string());
		EXPECT_EQ("00000000", b11.to_string());

		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x4Bu, b1.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x25u, b2.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x12u, b3.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x09u, b4.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x04u, b5.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x02u, b6.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x01u, b7.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00u, b8.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00u, b9.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00u, b10.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00u, b11.to_ulong());

		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(4u, b1.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(3u, b2.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(2u, b3.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(2u, b4.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b5.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b6.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b7.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b8.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b9.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b10.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b11.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b1  = (hamon::bitset<9>("111100000") >> 0);
		HAMON_CXX11_CONSTEXPR auto b2  = (hamon::bitset<9>("111100000") >> 1);
		HAMON_CXX11_CONSTEXPR auto b3  = (hamon::bitset<9>("111100000") >> 2);
		HAMON_CXX11_CONSTEXPR auto b4  = (hamon::bitset<9>("111100000") >> 3);
		HAMON_CXX11_CONSTEXPR auto b5  = (hamon::bitset<9>("111100000") >> 4);
		HAMON_CXX11_CONSTEXPR auto b6  = (hamon::bitset<9>("111100000") >> 5);
		HAMON_CXX11_CONSTEXPR auto b7  = (hamon::bitset<9>("111100000") >> 6);
		HAMON_CXX11_CONSTEXPR auto b8  = (hamon::bitset<9>("111100000") >> 7);
		HAMON_CXX11_CONSTEXPR auto b9  = (hamon::bitset<9>("111100000") >> 8);
		HAMON_CXX11_CONSTEXPR auto b10 = (hamon::bitset<9>("111100000") >> 9);
		HAMON_CXX11_CONSTEXPR auto b11 = (hamon::bitset<9>("111100000") >> 10);

		EXPECT_EQ("111100000", b1.to_string());
		EXPECT_EQ("011110000", b2.to_string());
		EXPECT_EQ("001111000", b3.to_string());
		EXPECT_EQ("000111100", b4.to_string());
		EXPECT_EQ("000011110", b5.to_string());
		EXPECT_EQ("000001111", b6.to_string());
		EXPECT_EQ("000000111", b7.to_string());
		EXPECT_EQ("000000011", b8.to_string());
		EXPECT_EQ("000000001", b9.to_string());
		EXPECT_EQ("000000000", b10.to_string());
		EXPECT_EQ("000000000", b11.to_string());

		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(4u, b1.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(4u, b2.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(4u, b3.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(4u, b4.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(4u, b5.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(4u, b6.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(3u, b7.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(2u, b8.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b9.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b10.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b11.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b1  = (~hamon::bitset<63>{} >> 0);
		HAMON_CXX11_CONSTEXPR auto b2  = (~hamon::bitset<63>{} >> 1);
		HAMON_CXX11_CONSTEXPR auto b3  = (~hamon::bitset<63>{} >> 8);
		HAMON_CXX11_CONSTEXPR auto b4  = (~hamon::bitset<63>{} >> 16);
		HAMON_CXX11_CONSTEXPR auto b5  = (~hamon::bitset<63>{} >> 17);
		HAMON_CXX11_CONSTEXPR auto b6  = (~hamon::bitset<63>{} >> 31);
		HAMON_CXX11_CONSTEXPR auto b7  = (~hamon::bitset<63>{} >> 32);
		HAMON_CXX11_CONSTEXPR auto b8  = (~hamon::bitset<63>{} >> 62);
		HAMON_CXX11_CONSTEXPR auto b9  = (~hamon::bitset<63>{} >> 63);
		HAMON_CXX11_CONSTEXPR auto b10 = (~hamon::bitset<63>{} >> 64);
		HAMON_CXX11_CONSTEXPR auto b11 = (~hamon::bitset<63>{} >> 100);
		HAMON_CXX11_CONSTEXPR auto b12 = (~hamon::bitset<63>{} >> 128);

		EXPECT_EQ("111111111111111111111111111111111111111111111111111111111111111", b1.to_string());
		EXPECT_EQ("011111111111111111111111111111111111111111111111111111111111111", b2.to_string());
		EXPECT_EQ("000000001111111111111111111111111111111111111111111111111111111", b3.to_string());
		EXPECT_EQ("000000000000000011111111111111111111111111111111111111111111111", b4.to_string());
		EXPECT_EQ("000000000000000001111111111111111111111111111111111111111111111", b5.to_string());
		EXPECT_EQ("000000000000000000000000000000011111111111111111111111111111111", b6.to_string());
		EXPECT_EQ("000000000000000000000000000000001111111111111111111111111111111", b7.to_string());
		EXPECT_EQ("000000000000000000000000000000000000000000000000000000000000001", b8.to_string());
		EXPECT_EQ("000000000000000000000000000000000000000000000000000000000000000", b9.to_string());
		EXPECT_EQ("000000000000000000000000000000000000000000000000000000000000000", b10.to_string());
		EXPECT_EQ("000000000000000000000000000000000000000000000000000000000000000", b11.to_string());
		EXPECT_EQ("000000000000000000000000000000000000000000000000000000000000000", b12.to_string());

		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(63u, b1.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(62u, b2.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(55u, b3.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(47u, b4.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(46u, b5.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(32u, b6.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(31u, b7.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ( 1u, b8.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ( 0u, b9.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ( 0u, b10.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ( 0u, b11.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ( 0u, b12.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b1  = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 0);
		HAMON_CXX11_CONSTEXPR auto b2  = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 1);
		HAMON_CXX11_CONSTEXPR auto b3  = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 2);
		HAMON_CXX11_CONSTEXPR auto b4  = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 3);
		HAMON_CXX11_CONSTEXPR auto b5  = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 4);
		HAMON_CXX11_CONSTEXPR auto b6  = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 5);
		HAMON_CXX11_CONSTEXPR auto b7  = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 6);
		HAMON_CXX11_CONSTEXPR auto b8  = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 7);
		HAMON_CXX11_CONSTEXPR auto b9  = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 8);
		HAMON_CXX11_CONSTEXPR auto b10 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 9);
		HAMON_CXX11_CONSTEXPR auto b11 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 10);
		HAMON_CXX11_CONSTEXPR auto b12 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 11);
		HAMON_CXX11_CONSTEXPR auto b13 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 12);
		HAMON_CXX11_CONSTEXPR auto b14 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 13);
		HAMON_CXX11_CONSTEXPR auto b15 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 14);
		HAMON_CXX11_CONSTEXPR auto b16 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 15);
		HAMON_CXX11_CONSTEXPR auto b17 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 16);
		HAMON_CXX11_CONSTEXPR auto b18 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 17);
		HAMON_CXX11_CONSTEXPR auto b19 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 18);
		HAMON_CXX11_CONSTEXPR auto b20 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 19);
		HAMON_CXX11_CONSTEXPR auto b21 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 20);
		HAMON_CXX11_CONSTEXPR auto b22 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 21);
		HAMON_CXX11_CONSTEXPR auto b23 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 22);
		HAMON_CXX11_CONSTEXPR auto b24 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 23);
		HAMON_CXX11_CONSTEXPR auto b25 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 24);
		HAMON_CXX11_CONSTEXPR auto b26 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 25);
		HAMON_CXX11_CONSTEXPR auto b27 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 26);
		HAMON_CXX11_CONSTEXPR auto b28 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 27);
		HAMON_CXX11_CONSTEXPR auto b29 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 28);
		HAMON_CXX11_CONSTEXPR auto b30 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 29);
		HAMON_CXX11_CONSTEXPR auto b31 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 30);
		HAMON_CXX11_CONSTEXPR auto b32 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 31);
		HAMON_CXX11_CONSTEXPR auto b33 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 32);
		HAMON_CXX11_CONSTEXPR auto b34 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 33);
		HAMON_CXX11_CONSTEXPR auto b35 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 34);
		HAMON_CXX11_CONSTEXPR auto b36 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 35);
		HAMON_CXX11_CONSTEXPR auto b37 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 36);
		HAMON_CXX11_CONSTEXPR auto b38 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 37);
		HAMON_CXX11_CONSTEXPR auto b39 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 38);
		HAMON_CXX11_CONSTEXPR auto b40 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 39);
		HAMON_CXX11_CONSTEXPR auto b41 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 40);
		HAMON_CXX11_CONSTEXPR auto b42 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 41);
		HAMON_CXX11_CONSTEXPR auto b43 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 42);
		HAMON_CXX11_CONSTEXPR auto b44 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 43);
		HAMON_CXX11_CONSTEXPR auto b45 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 44);
		HAMON_CXX11_CONSTEXPR auto b46 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 45);
		HAMON_CXX11_CONSTEXPR auto b47 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 46);
		HAMON_CXX11_CONSTEXPR auto b48 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 47);
		HAMON_CXX11_CONSTEXPR auto b49 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 48);
		HAMON_CXX11_CONSTEXPR auto b50 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 49);
		HAMON_CXX11_CONSTEXPR auto b51 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 50);
		HAMON_CXX11_CONSTEXPR auto b52 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 51);
		HAMON_CXX11_CONSTEXPR auto b53 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 52);
		HAMON_CXX11_CONSTEXPR auto b54 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 53);
		HAMON_CXX11_CONSTEXPR auto b55 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 54);
		HAMON_CXX11_CONSTEXPR auto b56 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 55);
		HAMON_CXX11_CONSTEXPR auto b57 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 56);
		HAMON_CXX11_CONSTEXPR auto b58 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 57);
		HAMON_CXX11_CONSTEXPR auto b59 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 58);
		HAMON_CXX11_CONSTEXPR auto b60 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 59);
		HAMON_CXX11_CONSTEXPR auto b61 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 60);
		HAMON_CXX11_CONSTEXPR auto b62 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 61);
		HAMON_CXX11_CONSTEXPR auto b63 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 62);
		HAMON_CXX11_CONSTEXPR auto b64 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 63);
		HAMON_CXX11_CONSTEXPR auto b65 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 64);
		HAMON_CXX11_CONSTEXPR auto b66 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") >> 65);

		EXPECT_EQ("0101111101011111010111110101111101011111010111110101111101011111", b1.to_string());
		EXPECT_EQ("0010111110101111101011111010111110101111101011111010111110101111", b2.to_string());
		EXPECT_EQ("0001011111010111110101111101011111010111110101111101011111010111", b3.to_string());
		EXPECT_EQ("0000101111101011111010111110101111101011111010111110101111101011", b4.to_string());
		EXPECT_EQ("0000010111110101111101011111010111110101111101011111010111110101", b5.to_string());
		EXPECT_EQ("0000001011111010111110101111101011111010111110101111101011111010", b6.to_string());
		EXPECT_EQ("0000000101111101011111010111110101111101011111010111110101111101", b7.to_string());
		EXPECT_EQ("0000000010111110101111101011111010111110101111101011111010111110", b8.to_string());
		EXPECT_EQ("0000000001011111010111110101111101011111010111110101111101011111", b9.to_string());
		EXPECT_EQ("0000000000101111101011111010111110101111101011111010111110101111", b10.to_string());
		EXPECT_EQ("0000000000010111110101111101011111010111110101111101011111010111", b11.to_string());
		EXPECT_EQ("0000000000001011111010111110101111101011111010111110101111101011", b12.to_string());
		EXPECT_EQ("0000000000000101111101011111010111110101111101011111010111110101", b13.to_string());
		EXPECT_EQ("0000000000000010111110101111101011111010111110101111101011111010", b14.to_string());
		EXPECT_EQ("0000000000000001011111010111110101111101011111010111110101111101", b15.to_string());
		EXPECT_EQ("0000000000000000101111101011111010111110101111101011111010111110", b16.to_string());
		EXPECT_EQ("0000000000000000010111110101111101011111010111110101111101011111", b17.to_string());
		EXPECT_EQ("0000000000000000001011111010111110101111101011111010111110101111", b18.to_string());
		EXPECT_EQ("0000000000000000000101111101011111010111110101111101011111010111", b19.to_string());
		EXPECT_EQ("0000000000000000000010111110101111101011111010111110101111101011", b20.to_string());
		EXPECT_EQ("0000000000000000000001011111010111110101111101011111010111110101", b21.to_string());
		EXPECT_EQ("0000000000000000000000101111101011111010111110101111101011111010", b22.to_string());
		EXPECT_EQ("0000000000000000000000010111110101111101011111010111110101111101", b23.to_string());
		EXPECT_EQ("0000000000000000000000001011111010111110101111101011111010111110", b24.to_string());
		EXPECT_EQ("0000000000000000000000000101111101011111010111110101111101011111", b25.to_string());
		EXPECT_EQ("0000000000000000000000000010111110101111101011111010111110101111", b26.to_string());
		EXPECT_EQ("0000000000000000000000000001011111010111110101111101011111010111", b27.to_string());
		EXPECT_EQ("0000000000000000000000000000101111101011111010111110101111101011", b28.to_string());
		EXPECT_EQ("0000000000000000000000000000010111110101111101011111010111110101", b29.to_string());
		EXPECT_EQ("0000000000000000000000000000001011111010111110101111101011111010", b30.to_string());
		EXPECT_EQ("0000000000000000000000000000000101111101011111010111110101111101", b31.to_string());
		EXPECT_EQ("0000000000000000000000000000000010111110101111101011111010111110", b32.to_string());
		EXPECT_EQ("0000000000000000000000000000000001011111010111110101111101011111", b33.to_string());
		EXPECT_EQ("0000000000000000000000000000000000101111101011111010111110101111", b34.to_string());
		EXPECT_EQ("0000000000000000000000000000000000010111110101111101011111010111", b35.to_string());
		EXPECT_EQ("0000000000000000000000000000000000001011111010111110101111101011", b36.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000101111101011111010111110101", b37.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000010111110101111101011111010", b38.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000001011111010111110101111101", b39.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000101111101011111010111110", b40.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000010111110101111101011111", b41.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000001011111010111110101111", b42.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000000101111101011111010111", b43.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000000010111110101111101011", b44.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000000001011111010111110101", b45.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000000000101111101011111010", b46.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000000000010111110101111101", b47.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000000000001011111010111110", b48.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000000000000101111101011111", b49.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000000000000010111110101111", b50.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000000000000001011111010111", b51.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000000000000000101111101011", b52.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000000000000000010111110101", b53.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000000000000000001011111010", b54.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000000000000000000101111101", b55.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000000000000000000010111110", b56.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000000000000000000001011111", b57.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000000000000000000000101111", b58.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000000000000000000000010111", b59.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000000000000000000000001011", b60.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000000000000000000000000101", b61.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000000000000000000000000010", b62.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000000000000000000000000001", b63.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000000000000000000000000000", b64.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000000000000000000000000000", b65.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000000000000000000000000000", b66.to_string());

		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x5F5F5F5F5F5F5F5Fu, b1.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x2FAFAFAFAFAFAFAFu, b2.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x17D7D7D7D7D7D7D7u, b3.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0BEBEBEBEBEBEBEBu, b4.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x05F5F5F5F5F5F5F5u, b5.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x02FAFAFAFAFAFAFAu, b6.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x017D7D7D7D7D7D7Du, b7.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00BEBEBEBEBEBEBEu, b8.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x005F5F5F5F5F5F5Fu, b9.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x002FAFAFAFAFAFAFu, b10.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0017D7D7D7D7D7D7u, b11.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x000BEBEBEBEBEBEBu, b12.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0005F5F5F5F5F5F5u, b13.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0002FAFAFAFAFAFAu, b14.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00017D7D7D7D7D7Du, b15.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0000BEBEBEBEBEBEu, b16.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00005F5F5F5F5F5Fu, b17.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00002FAFAFAFAFAFu, b18.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x000017D7D7D7D7D7u, b19.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00000BEBEBEBEBEBu, b20.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x000005F5F5F5F5F5u, b21.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x000002FAFAFAFAFAu, b22.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0000017D7D7D7D7Du, b23.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x000000BEBEBEBEBEu, b24.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0000005F5F5F5F5Fu, b25.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0000002FAFAFAFAFu, b26.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00000017D7D7D7D7u, b27.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0000000BEBEBEBEBu, b28.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00000005F5F5F5F5u, b29.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00000002FAFAFAFAu, b30.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x000000017D7D7D7Du, b31.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00000000BEBEBEBEu, b32.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x000000005F5F5F5Fu, b33.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x000000002FAFAFAFu, b34.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0000000017D7D7D7u, b35.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x000000000BEBEBEBu, b36.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0000000005F5F5F5u, b37.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0000000002FAFAFAu, b38.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00000000017D7D7Du, b39.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0000000000BEBEBEu, b40.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00000000005F5F5Fu, b41.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00000000002FAFAFu, b42.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x000000000017D7D7u, b43.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00000000000BEBEBu, b44.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x000000000005F5F5u, b45.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x000000000002FAFAu, b46.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0000000000017D7Du, b47.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x000000000000BEBEu, b48.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0000000000005F5Fu, b49.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0000000000002FAFu, b50.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00000000000017D7u, b51.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0000000000000BEBu, b52.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00000000000005F5u, b53.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00000000000002FAu, b54.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x000000000000017Du, b55.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00000000000000BEu, b56.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x000000000000005Fu, b57.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x000000000000002Fu, b58.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0000000000000017u, b59.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x000000000000000Bu, b60.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0000000000000005u, b61.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0000000000000002u, b62.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0000000000000001u, b63.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0000000000000000u, b64.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0000000000000000u, b65.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0000000000000000u, b66.to_ullong());

		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(4u, b59.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(3u, b60.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(2u, b61.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b62.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b63.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b64.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b65.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b66.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b0 = hamon::bitset<128>("10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
		HAMON_CXX11_CONSTEXPR auto t1 = b0 >> 0;
		HAMON_CXX11_CONSTEXPR auto t2 = b0 >> 1;
		HAMON_CXX11_CONSTEXPR auto t3 = b0 >> 2;
		HAMON_CXX11_CONSTEXPR auto t4 = b0 >> 3;
		HAMON_CXX11_CONSTEXPR auto t5 = b0 >> 127;
		EXPECT_EQ("10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", t1.to_string());
		EXPECT_EQ("01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", t2.to_string());
		EXPECT_EQ("00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", t3.to_string());
		EXPECT_EQ("00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", t4.to_string());
		EXPECT_EQ("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001", t5.to_string());
	}
}
