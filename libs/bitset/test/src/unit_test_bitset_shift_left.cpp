/**
 *	@file	unit_test_bitset_shift_left.cpp
 *
 *	@brief	operator<< のテスト
 *
 *	constexpr bitset operator<<(size_t pos) const noexcept;
 */

#include <hamon/bitset.hpp>
#include <gtest/gtest.h>
#include "constexpr_test.hpp"

GTEST_TEST(BitsetTest, ShiftLeftTest)
{
	{
		HAMON_CXX11_CONSTEXPR auto b1 = (hamon::bitset<0>() << 0);
		HAMON_CXX11_CONSTEXPR auto b2 = (hamon::bitset<0>() << 1);
		HAMON_CXX11_CONSTEXPR auto b3 = (hamon::bitset<0>() << 2);

		EXPECT_EQ("", b1.to_string());
		EXPECT_EQ("", b2.to_string());
		EXPECT_EQ("", b3.to_string());

		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b1.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b2.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b3.to_ulong());

		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b1.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b2.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b3.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b1 = (~hamon::bitset<1>() << 0);
		HAMON_CXX11_CONSTEXPR auto b2 = (~hamon::bitset<1>() << 1);

		EXPECT_EQ("1", b1.to_string());
		EXPECT_EQ("0", b2.to_string());

		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b1.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b2.to_ulong());

		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b1.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b2.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b1 = (~hamon::bitset<7>{} << 0);
		HAMON_CXX11_CONSTEXPR auto b2 = (~hamon::bitset<7>{} << 1);
		HAMON_CXX11_CONSTEXPR auto b3 = (~hamon::bitset<7>{} << 2);
		HAMON_CXX11_CONSTEXPR auto b4 = (~hamon::bitset<7>{} << 3);
		HAMON_CXX11_CONSTEXPR auto b5 = (~hamon::bitset<7>{} << 4);
		HAMON_CXX11_CONSTEXPR auto b6 = (~hamon::bitset<7>{} << 5);
		HAMON_CXX11_CONSTEXPR auto b7 = (~hamon::bitset<7>{} << 6);
		HAMON_CXX11_CONSTEXPR auto b8 = (~hamon::bitset<7>{} << 7);
		HAMON_CXX11_CONSTEXPR auto b9 = (~hamon::bitset<7>{} << 8);

		EXPECT_EQ("1111111", b1.to_string());
		EXPECT_EQ("1111110", b2.to_string());
		EXPECT_EQ("1111100", b3.to_string());
		EXPECT_EQ("1111000", b4.to_string());
		EXPECT_EQ("1110000", b5.to_string());
		EXPECT_EQ("1100000", b6.to_string());
		EXPECT_EQ("1000000", b7.to_string());
		EXPECT_EQ("0000000", b8.to_string());
		EXPECT_EQ("0000000", b9.to_string());

		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x7Fu, b1.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x7Eu, b2.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x7Cu, b3.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x78u, b4.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x70u, b5.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x60u, b6.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x40u, b7.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00u, b8.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00u, b9.to_ulong());

		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(7u, b1.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(6u, b2.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(5u, b3.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(4u, b4.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(3u, b5.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(2u, b6.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b7.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b8.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b9.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b1  = (hamon::bitset<8>("01001011") << 0);
		HAMON_CXX11_CONSTEXPR auto b2  = (hamon::bitset<8>("01001011") << 1);
		HAMON_CXX11_CONSTEXPR auto b3  = (hamon::bitset<8>("01001011") << 2);
		HAMON_CXX11_CONSTEXPR auto b4  = (hamon::bitset<8>("01001011") << 3);
		HAMON_CXX11_CONSTEXPR auto b5  = (hamon::bitset<8>("01001011") << 4);
		HAMON_CXX11_CONSTEXPR auto b6  = (hamon::bitset<8>("01001011") << 5);
		HAMON_CXX11_CONSTEXPR auto b7  = (hamon::bitset<8>("01001011") << 6);
		HAMON_CXX11_CONSTEXPR auto b8  = (hamon::bitset<8>("01001011") << 7);
		HAMON_CXX11_CONSTEXPR auto b9  = (hamon::bitset<8>("01001011") << 8);
		HAMON_CXX11_CONSTEXPR auto b10 = (hamon::bitset<8>("01001011") << 9);
		HAMON_CXX11_CONSTEXPR auto b11 = (hamon::bitset<8>("01001011") << 10);

		EXPECT_EQ("01001011", b1.to_string());
		EXPECT_EQ("10010110", b2.to_string());
		EXPECT_EQ("00101100", b3.to_string());
		EXPECT_EQ("01011000", b4.to_string());
		EXPECT_EQ("10110000", b5.to_string());
		EXPECT_EQ("01100000", b6.to_string());
		EXPECT_EQ("11000000", b7.to_string());
		EXPECT_EQ("10000000", b8.to_string());
		EXPECT_EQ("00000000", b9.to_string());
		EXPECT_EQ("00000000", b10.to_string());
		EXPECT_EQ("00000000", b11.to_string());

		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x4Bu, b1.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x96u, b2.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x2Cu, b3.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x58u, b4.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xB0u, b5.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x60u, b6.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xC0u, b7.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x80u, b8.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00u, b9.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00u, b10.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00u, b11.to_ulong());

		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(4u, b1.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(4u, b2.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(3u, b3.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(3u, b4.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(3u, b5.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(2u, b6.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(2u, b7.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b8.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b9.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b10.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b11.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b1  = (hamon::bitset<9>("000001111") << 0);
		HAMON_CXX11_CONSTEXPR auto b2  = (hamon::bitset<9>("000001111") << 1);
		HAMON_CXX11_CONSTEXPR auto b3  = (hamon::bitset<9>("000001111") << 2);
		HAMON_CXX11_CONSTEXPR auto b4  = (hamon::bitset<9>("000001111") << 3);
		HAMON_CXX11_CONSTEXPR auto b5  = (hamon::bitset<9>("000001111") << 4);
		HAMON_CXX11_CONSTEXPR auto b6  = (hamon::bitset<9>("000001111") << 5);
		HAMON_CXX11_CONSTEXPR auto b7  = (hamon::bitset<9>("000001111") << 6);
		HAMON_CXX11_CONSTEXPR auto b8  = (hamon::bitset<9>("000001111") << 7);
		HAMON_CXX11_CONSTEXPR auto b9  = (hamon::bitset<9>("000001111") << 8);
		HAMON_CXX11_CONSTEXPR auto b10 = (hamon::bitset<9>("000001111") << 9);
		HAMON_CXX11_CONSTEXPR auto b11 = (hamon::bitset<9>("000001111") << 10);

		EXPECT_EQ("000001111", b1.to_string());
		EXPECT_EQ("000011110", b2.to_string());
		EXPECT_EQ("000111100", b3.to_string());
		EXPECT_EQ("001111000", b4.to_string());
		EXPECT_EQ("011110000", b5.to_string());
		EXPECT_EQ("111100000", b6.to_string());
		EXPECT_EQ("111000000", b7.to_string());
		EXPECT_EQ("110000000", b8.to_string());
		EXPECT_EQ("100000000", b9.to_string());
		EXPECT_EQ("000000000", b10.to_string());
		EXPECT_EQ("000000000", b11.to_string());

		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(4u, b1.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(4u, b2.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(4u, b3.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(4u, b4.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(4u, b5.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(4u, b6.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(3u, b7.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(2u, b8.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b9.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b10.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b11.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b1  = (~hamon::bitset<63>{} << 0);
		HAMON_CXX11_CONSTEXPR auto b2  = (~hamon::bitset<63>{} << 1);
		HAMON_CXX11_CONSTEXPR auto b3  = (~hamon::bitset<63>{} << 2);
		HAMON_CXX11_CONSTEXPR auto b4  = (~hamon::bitset<63>{} << 31);
		HAMON_CXX11_CONSTEXPR auto b5  = (~hamon::bitset<63>{} << 32);
		HAMON_CXX11_CONSTEXPR auto b6  = (~hamon::bitset<63>{} << 61);
		HAMON_CXX11_CONSTEXPR auto b7  = (~hamon::bitset<63>{} << 62);
		HAMON_CXX11_CONSTEXPR auto b8  = (~hamon::bitset<63>{} << 63);
		HAMON_CXX11_CONSTEXPR auto b9  = (~hamon::bitset<63>{} << 100);

		EXPECT_EQ("111111111111111111111111111111111111111111111111111111111111111", b1.to_string());
		EXPECT_EQ("111111111111111111111111111111111111111111111111111111111111110", b2.to_string());
		EXPECT_EQ("111111111111111111111111111111111111111111111111111111111111100", b3.to_string());
		EXPECT_EQ("111111111111111111111111111111110000000000000000000000000000000", b4.to_string());
		EXPECT_EQ("111111111111111111111111111111100000000000000000000000000000000", b5.to_string());
		EXPECT_EQ("110000000000000000000000000000000000000000000000000000000000000", b6.to_string());
		EXPECT_EQ("100000000000000000000000000000000000000000000000000000000000000", b7.to_string());
		EXPECT_EQ("000000000000000000000000000000000000000000000000000000000000000", b8.to_string());
		EXPECT_EQ("000000000000000000000000000000000000000000000000000000000000000", b9.to_string());

		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(63u, b1.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(62u, b2.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(61u, b3.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(32u, b4.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(31u, b5.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ( 2u, b6.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ( 1u, b7.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ( 0u, b8.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ( 0u, b9.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b1  = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 0);
		HAMON_CXX11_CONSTEXPR auto b2  = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 1);
		HAMON_CXX11_CONSTEXPR auto b3  = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 2);
		HAMON_CXX11_CONSTEXPR auto b4  = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 3);
		HAMON_CXX11_CONSTEXPR auto b5  = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 4);
		HAMON_CXX11_CONSTEXPR auto b6  = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 5);
		HAMON_CXX11_CONSTEXPR auto b7  = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 6);
		HAMON_CXX11_CONSTEXPR auto b8  = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 7);
		HAMON_CXX11_CONSTEXPR auto b9  = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 8);
		HAMON_CXX11_CONSTEXPR auto b10 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 9);
		HAMON_CXX11_CONSTEXPR auto b11 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 10);
		HAMON_CXX11_CONSTEXPR auto b12 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 11);
		HAMON_CXX11_CONSTEXPR auto b13 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 12);
		HAMON_CXX11_CONSTEXPR auto b14 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 13);
		HAMON_CXX11_CONSTEXPR auto b15 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 14);
		HAMON_CXX11_CONSTEXPR auto b16 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 15);
		HAMON_CXX11_CONSTEXPR auto b17 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 16);
		HAMON_CXX11_CONSTEXPR auto b18 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 17);
		HAMON_CXX11_CONSTEXPR auto b19 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 18);
		HAMON_CXX11_CONSTEXPR auto b20 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 19);
		HAMON_CXX11_CONSTEXPR auto b21 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 20);
		HAMON_CXX11_CONSTEXPR auto b22 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 21);
		HAMON_CXX11_CONSTEXPR auto b23 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 22);
		HAMON_CXX11_CONSTEXPR auto b24 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 23);
		HAMON_CXX11_CONSTEXPR auto b25 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 24);
		HAMON_CXX11_CONSTEXPR auto b26 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 25);
		HAMON_CXX11_CONSTEXPR auto b27 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 26);
		HAMON_CXX11_CONSTEXPR auto b28 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 27);
		HAMON_CXX11_CONSTEXPR auto b29 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 28);
		HAMON_CXX11_CONSTEXPR auto b30 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 29);
		HAMON_CXX11_CONSTEXPR auto b31 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 30);
		HAMON_CXX11_CONSTEXPR auto b32 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 31);
		HAMON_CXX11_CONSTEXPR auto b33 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 32);
		HAMON_CXX11_CONSTEXPR auto b34 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 33);
		HAMON_CXX11_CONSTEXPR auto b35 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 34);
		HAMON_CXX11_CONSTEXPR auto b36 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 35);
		HAMON_CXX11_CONSTEXPR auto b37 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 36);
		HAMON_CXX11_CONSTEXPR auto b38 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 37);
		HAMON_CXX11_CONSTEXPR auto b39 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 38);
		HAMON_CXX11_CONSTEXPR auto b40 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 39);
		HAMON_CXX11_CONSTEXPR auto b41 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 40);
		HAMON_CXX11_CONSTEXPR auto b42 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 41);
		HAMON_CXX11_CONSTEXPR auto b43 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 42);
		HAMON_CXX11_CONSTEXPR auto b44 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 43);
		HAMON_CXX11_CONSTEXPR auto b45 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 44);
		HAMON_CXX11_CONSTEXPR auto b46 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 45);
		HAMON_CXX11_CONSTEXPR auto b47 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 46);
		HAMON_CXX11_CONSTEXPR auto b48 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 47);
		HAMON_CXX11_CONSTEXPR auto b49 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 48);
		HAMON_CXX11_CONSTEXPR auto b50 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 49);
		HAMON_CXX11_CONSTEXPR auto b51 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 50);
		HAMON_CXX11_CONSTEXPR auto b52 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 51);
		HAMON_CXX11_CONSTEXPR auto b53 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 52);
		HAMON_CXX11_CONSTEXPR auto b54 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 53);
		HAMON_CXX11_CONSTEXPR auto b55 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 54);
		HAMON_CXX11_CONSTEXPR auto b56 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 55);
		HAMON_CXX11_CONSTEXPR auto b57 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 56);
		HAMON_CXX11_CONSTEXPR auto b58 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 57);
		HAMON_CXX11_CONSTEXPR auto b59 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 58);
		HAMON_CXX11_CONSTEXPR auto b60 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 59);
		HAMON_CXX11_CONSTEXPR auto b61 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 60);
		HAMON_CXX11_CONSTEXPR auto b62 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 61);
		HAMON_CXX11_CONSTEXPR auto b63 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 62);
		HAMON_CXX11_CONSTEXPR auto b64 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 63);
		HAMON_CXX11_CONSTEXPR auto b65 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 64);
		HAMON_CXX11_CONSTEXPR auto b66 = (hamon::bitset<64>("0101111101011111010111110101111101011111010111110101111101011111") << 65);
		
		EXPECT_EQ("0101111101011111010111110101111101011111010111110101111101011111", b1.to_string());
		EXPECT_EQ("1011111010111110101111101011111010111110101111101011111010111110", b2.to_string());
		EXPECT_EQ("0111110101111101011111010111110101111101011111010111110101111100", b3.to_string());
		EXPECT_EQ("1111101011111010111110101111101011111010111110101111101011111000", b4.to_string());
		EXPECT_EQ("1111010111110101111101011111010111110101111101011111010111110000", b5.to_string());
		EXPECT_EQ("1110101111101011111010111110101111101011111010111110101111100000", b6.to_string());
		EXPECT_EQ("1101011111010111110101111101011111010111110101111101011111000000", b7.to_string());
		EXPECT_EQ("1010111110101111101011111010111110101111101011111010111110000000", b8.to_string());
		EXPECT_EQ("0101111101011111010111110101111101011111010111110101111100000000", b9.to_string());
		EXPECT_EQ("1011111010111110101111101011111010111110101111101011111000000000", b10.to_string());
		EXPECT_EQ("0111110101111101011111010111110101111101011111010111110000000000", b11.to_string());
		EXPECT_EQ("1111101011111010111110101111101011111010111110101111100000000000", b12.to_string());
		EXPECT_EQ("1111010111110101111101011111010111110101111101011111000000000000", b13.to_string());
		EXPECT_EQ("1110101111101011111010111110101111101011111010111110000000000000", b14.to_string());
		EXPECT_EQ("1101011111010111110101111101011111010111110101111100000000000000", b15.to_string());
		EXPECT_EQ("1010111110101111101011111010111110101111101011111000000000000000", b16.to_string());
		EXPECT_EQ("0101111101011111010111110101111101011111010111110000000000000000", b17.to_string());
		EXPECT_EQ("1011111010111110101111101011111010111110101111100000000000000000", b18.to_string());
		EXPECT_EQ("0111110101111101011111010111110101111101011111000000000000000000", b19.to_string());
		EXPECT_EQ("1111101011111010111110101111101011111010111110000000000000000000", b20.to_string());
		EXPECT_EQ("1111010111110101111101011111010111110101111100000000000000000000", b21.to_string());
		EXPECT_EQ("1110101111101011111010111110101111101011111000000000000000000000", b22.to_string());
		EXPECT_EQ("1101011111010111110101111101011111010111110000000000000000000000", b23.to_string());
		EXPECT_EQ("1010111110101111101011111010111110101111100000000000000000000000", b24.to_string());
		EXPECT_EQ("0101111101011111010111110101111101011111000000000000000000000000", b25.to_string());
		EXPECT_EQ("1011111010111110101111101011111010111110000000000000000000000000", b26.to_string());
		EXPECT_EQ("0111110101111101011111010111110101111100000000000000000000000000", b27.to_string());
		EXPECT_EQ("1111101011111010111110101111101011111000000000000000000000000000", b28.to_string());
		EXPECT_EQ("1111010111110101111101011111010111110000000000000000000000000000", b29.to_string());
		EXPECT_EQ("1110101111101011111010111110101111100000000000000000000000000000", b30.to_string());
		EXPECT_EQ("1101011111010111110101111101011111000000000000000000000000000000", b31.to_string());
		EXPECT_EQ("1010111110101111101011111010111110000000000000000000000000000000", b32.to_string());
		EXPECT_EQ("0101111101011111010111110101111100000000000000000000000000000000", b33.to_string());
		EXPECT_EQ("1011111010111110101111101011111000000000000000000000000000000000", b34.to_string());
		EXPECT_EQ("0111110101111101011111010111110000000000000000000000000000000000", b35.to_string());
		EXPECT_EQ("1111101011111010111110101111100000000000000000000000000000000000", b36.to_string());
		EXPECT_EQ("1111010111110101111101011111000000000000000000000000000000000000", b37.to_string());
		EXPECT_EQ("1110101111101011111010111110000000000000000000000000000000000000", b38.to_string());
		EXPECT_EQ("1101011111010111110101111100000000000000000000000000000000000000", b39.to_string());
		EXPECT_EQ("1010111110101111101011111000000000000000000000000000000000000000", b40.to_string());
		EXPECT_EQ("0101111101011111010111110000000000000000000000000000000000000000", b41.to_string());
		EXPECT_EQ("1011111010111110101111100000000000000000000000000000000000000000", b42.to_string());
		EXPECT_EQ("0111110101111101011111000000000000000000000000000000000000000000", b43.to_string());
		EXPECT_EQ("1111101011111010111110000000000000000000000000000000000000000000", b44.to_string());
		EXPECT_EQ("1111010111110101111100000000000000000000000000000000000000000000", b45.to_string());
		EXPECT_EQ("1110101111101011111000000000000000000000000000000000000000000000", b46.to_string());
		EXPECT_EQ("1101011111010111110000000000000000000000000000000000000000000000", b47.to_string());
		EXPECT_EQ("1010111110101111100000000000000000000000000000000000000000000000", b48.to_string());
		EXPECT_EQ("0101111101011111000000000000000000000000000000000000000000000000", b49.to_string());
		EXPECT_EQ("1011111010111110000000000000000000000000000000000000000000000000", b50.to_string());
		EXPECT_EQ("0111110101111100000000000000000000000000000000000000000000000000", b51.to_string());
		EXPECT_EQ("1111101011111000000000000000000000000000000000000000000000000000", b52.to_string());
		EXPECT_EQ("1111010111110000000000000000000000000000000000000000000000000000", b53.to_string());
		EXPECT_EQ("1110101111100000000000000000000000000000000000000000000000000000", b54.to_string());
		EXPECT_EQ("1101011111000000000000000000000000000000000000000000000000000000", b55.to_string());
		EXPECT_EQ("1010111110000000000000000000000000000000000000000000000000000000", b56.to_string());
		EXPECT_EQ("0101111100000000000000000000000000000000000000000000000000000000", b57.to_string());
		EXPECT_EQ("1011111000000000000000000000000000000000000000000000000000000000", b58.to_string());
		EXPECT_EQ("0111110000000000000000000000000000000000000000000000000000000000", b59.to_string());
		EXPECT_EQ("1111100000000000000000000000000000000000000000000000000000000000", b60.to_string());
		EXPECT_EQ("1111000000000000000000000000000000000000000000000000000000000000", b61.to_string());
		EXPECT_EQ("1110000000000000000000000000000000000000000000000000000000000000", b62.to_string());
		EXPECT_EQ("1100000000000000000000000000000000000000000000000000000000000000", b63.to_string());
		EXPECT_EQ("1000000000000000000000000000000000000000000000000000000000000000", b64.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000000000000000000000000000", b65.to_string());
		EXPECT_EQ("0000000000000000000000000000000000000000000000000000000000000000", b66.to_string());

		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x5F5F5F5F5F5F5F5Fu, b1.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xBEBEBEBEBEBEBEBEu, b2.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x7D7D7D7D7D7D7D7Cu, b3.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xFAFAFAFAFAFAFAF8u, b4.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xF5F5F5F5F5F5F5F0u, b5.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xEBEBEBEBEBEBEBE0u, b6.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xD7D7D7D7D7D7D7C0u, b7.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xAFAFAFAFAFAFAF80u, b8.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x5F5F5F5F5F5F5F00u, b9.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xBEBEBEBEBEBEBE00u, b10.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x7D7D7D7D7D7D7C00u, b11.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xFAFAFAFAFAFAF800u, b12.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xF5F5F5F5F5F5F000u, b13.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xEBEBEBEBEBEBE000u, b14.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xD7D7D7D7D7D7C000u, b15.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xAFAFAFAFAFAF8000u, b16.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x5F5F5F5F5F5F0000u, b17.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xBEBEBEBEBEBE0000u, b18.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x7D7D7D7D7D7C0000u, b19.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xFAFAFAFAFAF80000u, b20.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xF5F5F5F5F5F00000u, b21.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xEBEBEBEBEBE00000u, b22.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xD7D7D7D7D7C00000u, b23.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xAFAFAFAFAF800000u, b24.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x5F5F5F5F5F000000u, b25.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xBEBEBEBEBE000000u, b26.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x7D7D7D7D7C000000u, b27.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xFAFAFAFAF8000000u, b28.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xF5F5F5F5F0000000u, b29.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xEBEBEBEBE0000000u, b30.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xD7D7D7D7C0000000u, b31.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xAFAFAFAF80000000u, b32.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x5F5F5F5F00000000u, b33.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xBEBEBEBE00000000u, b34.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x7D7D7D7C00000000u, b35.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xFAFAFAF800000000u, b36.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xF5F5F5F000000000u, b37.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xEBEBEBE000000000u, b38.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xD7D7D7C000000000u, b39.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xAFAFAF8000000000u, b40.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x5F5F5F0000000000u, b41.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xBEBEBE0000000000u, b42.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x7D7D7C0000000000u, b43.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xFAFAF80000000000u, b44.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xF5F5F00000000000u, b45.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xEBEBE00000000000u, b46.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xD7D7C00000000000u, b47.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xAFAF800000000000u, b48.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x5F5F000000000000u, b49.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xBEBE000000000000u, b50.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x7D7C000000000000u, b51.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xFAF8000000000000u, b52.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xF5F0000000000000u, b53.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xEBE0000000000000u, b54.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xD7C0000000000000u, b55.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xAF80000000000000u, b56.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x5F00000000000000u, b57.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xBE00000000000000u, b58.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x7C00000000000000u, b59.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xF800000000000000u, b60.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xF000000000000000u, b61.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xE000000000000000u, b62.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xC000000000000000u, b63.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x8000000000000000u, b64.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0000000000000000u, b65.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x0000000000000000u, b66.to_ullong());

		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(5u, b59.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(5u, b60.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(4u, b61.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(3u, b62.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(2u, b63.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b64.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b65.count());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b66.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b0 = hamon::bitset<128>("1");
		HAMON_CXX11_CONSTEXPR auto t1 = b0 << 0;
		HAMON_CXX11_CONSTEXPR auto t2 = b0 << 1;
		HAMON_CXX11_CONSTEXPR auto t3 = b0 << 2;
		HAMON_CXX11_CONSTEXPR auto t4 = b0 << 3;
		HAMON_CXX11_CONSTEXPR auto t5 = b0 << 127;
		EXPECT_EQ("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001", t1.to_string());
		EXPECT_EQ("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010", t2.to_string());
		EXPECT_EQ("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100", t3.to_string());
		EXPECT_EQ("00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000", t4.to_string());
		EXPECT_EQ("10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", t5.to_string());
	}
}
