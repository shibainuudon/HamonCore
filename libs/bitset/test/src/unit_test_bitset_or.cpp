/**
 *	@file	unit_test_bitset_or.cpp
 *
 *	@brief	operator| のテスト
 *
 *	template<size_t N>
 *	constexpr bitset<N> operator|(const bitset<N>& lhs, const bitset<N>& rhs) noexcept;
 */

#include <hamon/bitset.hpp>
#include <gtest/gtest.h>
#include "constexpr_test.hpp"

GTEST_TEST(BitsetTest, OrTest)
{
	{
		HAMON_CXX11_CONSTEXPR auto b =
			hamon::bitset<0>() |
			hamon::bitset<0>();
		EXPECT_EQ("", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00u, b.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b =
			hamon::bitset<1>("0") |
			hamon::bitset<1>("0");
		EXPECT_EQ("0", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x00u, b.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b =
			hamon::bitset<1>("1") |
			hamon::bitset<1>("0");
		EXPECT_EQ("1", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x01u, b.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b =
			hamon::bitset<1>("0") |
			hamon::bitset<1>("1");
		EXPECT_EQ("1", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x01u, b.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b =
			hamon::bitset<1>("1") |
			hamon::bitset<1>("1");
		EXPECT_EQ("1", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x01u, b.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b =
			hamon::bitset<7>("1000000") |
			hamon::bitset<7>("0000001");
		EXPECT_EQ("1000001", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x41u, b.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(2u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b =
			hamon::bitset<8>("01010101") |
			hamon::bitset<8>("00001111");
		EXPECT_EQ("01011111", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x5Fu, b.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(6u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b =
			hamon::bitset<9>("100000000") |
			hamon::bitset<9>("000000001");
		EXPECT_EQ("100000001", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x101u, b.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(2u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b =
			hamon::bitset<16>("0101010101010101") |
			hamon::bitset<16>("0000111100001111");
		EXPECT_EQ("0101111101011111", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x5F5Fu, b.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(12u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b =
			hamon::bitset<31>("0101010101010101010101010101010") |
			hamon::bitset<31>("0100110001110000111100000111110");
		EXPECT_STREQ("0101110101110101111101010111110", b.to_string().c_str());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x2EBAFABEu, b.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(21u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b =
			hamon::bitset<32>("01010101010101010101010101010101") |
			hamon::bitset<32>("00001111000011110000111100001111");
		EXPECT_EQ("01011111010111110101111101011111", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x5F5F5F5Fu, b.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(24u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b =
			hamon::bitset<33>("010101010101010101010101010101010") |
			hamon::bitset<33>("010011000111000011110000011111000");
		EXPECT_STREQ("010111010111010111110101011111010", b.to_string().c_str());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0xBAEBEAFAu, b.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(22u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b =
			hamon::bitset<63>("000000000000000000000000000000000000000000000000000000000000000") |
			hamon::bitset<63>("100000000000000000000000000000000000000000000000000000000000000");
		EXPECT_EQ("100000000000000000000000000000000000000000000000000000000000000", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x4000000000000000u, b.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b =
			hamon::bitset<63>("000000000000000000000000000000000000000000000000000000000000000") |
			hamon::bitset<63>("000000000000000000000000000000000000000000000000000000000000001");
		EXPECT_EQ("000000000000000000000000000000000000000000000000000000000000001", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b.to_ulong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b =
			hamon::bitset<64>("0101010101010101010101010101010101010101010101010101010101010101") |
			hamon::bitset<64>("0000111100001111000011110000111100001111000011110000111100001111");
		EXPECT_EQ("0101111101011111010111110101111101011111010111110101111101011111", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(0x5F5F5F5F5F5F5F5Fu, b.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(48u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b =
			hamon::bitset<65>("00000000000000000000000000000000000000000000000000000000000000000") |
			hamon::bitset<65>("10000000000000000000000000000000000000000000000000000000000000000");
		EXPECT_EQ("10000000000000000000000000000000000000000000000000000000000000000", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b =
			hamon::bitset<65>("00000000000000000000000000000000000000000000000000000000000000000") |
			hamon::bitset<65>("00000000000000000000000000000000000000000000000000000000000000001");
		EXPECT_EQ("00000000000000000000000000000000000000000000000000000000000000001", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b.to_ullong());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(1u, b.count());
	}
	{
		HAMON_CXX11_CONSTEXPR auto b =
			hamon::bitset<128>("01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101") |
			hamon::bitset<128>("00001111000011110000111100001111000011110000111100001111000011110000111100001111000011110000111100001111000011110000111100001111");
		EXPECT_EQ("01011111010111110101111101011111010111110101111101011111010111110101111101011111010111110101111101011111010111110101111101011111", b.to_string());
		HAMON_CXX11_CONSTEXPR_EXPECT_EQ(96u, b.count());
	}
}
